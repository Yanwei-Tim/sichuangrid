<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap
PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN"
"http://ibatis.apache.org/dtd/sql-map-2.dtd">

<sqlMap namespace="searchIdleYouth">
<typeAlias alias="searchIdleYouthVo" type="com.tianque.domain.vo.SearchIdleYouthVo" />
	<sql id="fields">
		uni.id,uni.baseinfoid,uni.addressInfoId,uni.orgId,uni.orgInternalCode,uni.attentionExtent,uni.workCondition,uni.isStayInSchool,
		uni.schoolName,uni.isEmphasis,uni.isEmphasisReason,uni.isEmphasisDate,uni.sourcesState,uni.createUser,
		uni.updateUser,uni.createDate,uni.updateDate,uni.guardianName,uni.guardianTelephone,uni.helpingSituation 
	</sql>
	<sql id="sql_where">
		from idleYouths uni left join idleYouthsHasPropertyDicts  hDicts on uni.id = hDicts.Idleyouthsid  
			left join baseinfo b on uni.baseInfoId=b.id <include refid="addressInfo.joinAddressInfo"/> 
		where 1=1   
		<dynamic>
		<isPropertyAvailable property="fastSearchKeyWords">
			<isNotNull property="fastSearchKeyWords" prepend=" and ">
				(upper(idCardNo) like  upper(#fastSearchKeyWords#)||'%' or name like #fastSearchKeyWords#||'%' or fullPinyin like #fastSearchKeyWords#||'%' or simplePinyin like #fastSearchKeyWords#||'%' )
			</isNotNull>
		</isPropertyAvailable>
	        <isPropertyAvailable property="orgInternalCode">
				<isNotNull property="orgInternalCode" prepend=" and ">
					orgInternalCode like  #orgInternalCode#||'%'
				</isNotNull>
			</isPropertyAvailable>
         <isPropertyAvailable property="idCardNo">
            <isNotEmpty prepend=" and " property="idCardNo">
            	upper(idCardNo) like upper(#idCardNo#)||'%'
            </isNotEmpty>
          </isPropertyAvailable>
          <isPropertyAvailable property="gender">
            <isNotEmpty prepend=" and " property="gender.id">
            	gender  = #gender.id#
            </isNotEmpty>
          </isPropertyAvailable>
          
          <isPropertyAvailable property="name">
				 <isNotEmpty prepend=" and " property="name">
            	(name like #name#||'%' or fullPinyin like #name#||'%' or simplePinyin like #name#||'%')
            </isNotEmpty>
			</isPropertyAvailable>
              <isPropertyAvailable property="usedName">
            <isNotEmpty prepend=" and " property="usedName">
            	usedName like #usedName#||'%'
            </isNotEmpty>
            </isPropertyAvailable>
              <isPropertyAvailable property="birthdayStart">
            <isNotEmpty prepend=" and " property="birthdayStart">
            	<![CDATA[ birthday >= #birthdayStart# ]]>
            </isNotEmpty>
            </isPropertyAvailable>
             <isPropertyAvailable property="birthdayEnd">
            <isNotEmpty prepend=" and " property="birthdayEnd">
            	<![CDATA[ birthday <= #birthdayEnd# ]]>
            </isNotEmpty> 
            </isPropertyAvailable>
            <isPropertyAvailable property="province">
            <isNotEmpty prepend=" and " property="province">
            	province=#province#
            </isNotEmpty>
            </isPropertyAvailable>
             <isPropertyAvailable property="city">
             <isNotEmpty prepend=" and " property="city">
            	city=#city#
            </isNotEmpty>
            </isPropertyAvailable>
             <isPropertyAvailable property="district">
             <isNotEmpty prepend=" and " property="district">
            	district=#district#
            </isNotEmpty>
            </isPropertyAvailable>
             <isPropertyAvailable property="nativePlaceAddress">
             <isNotEmpty prepend=" and " property="nativePlaceAddress">
            	nativePlaceAddress  like  #nativePlaceAddress#||'%'
            </isNotEmpty>
            </isPropertyAvailable>
            
             <isPropertyAvailable property="politicalBackground">
             <isNotEmpty prepend=" and " property="politicalBackground.id">
            	politicalBackground = #politicalBackground.id#
            </isNotEmpty>
            </isPropertyAvailable>
			 
            <isPropertyAvailable property="currentAddress">
            <isNotEmpty prepend=" and " property="currentAddress">
            	currentAddress like #currentAddress#||'%'
             </isNotEmpty>
             </isPropertyAvailable>
              <isPropertyAvailable property="telephone">
            <isNotEmpty prepend=" and " property="telephone">
            	telephone like '%'||#telephone#||'%'
            </isNotEmpty>
            </isPropertyAvailable>
             <isPropertyAvailable property="mobileNumber">
            <isNotEmpty prepend=" and " property="mobileNumber">
            	mobileNumber like '%'||#mobileNumber#||'%'
            </isNotEmpty>
            </isPropertyAvailable>
             <isPropertyAvailable property="maritalState">
             <isNotEmpty prepend=" and " property="maritalState.id">
            	maritalState=#maritalState.id#
            </isNotEmpty>
            </isPropertyAvailable>
             <isPropertyAvailable property="statureStart">
             <isNotNull prepend=" and " property="statureStart">
            	stature >= #statureStart#
            </isNotNull>
            </isPropertyAvailable>
            <isPropertyAvailable property="statureEnd">
             <isNotNull prepend=" and " property="statureEnd">
            	stature <![CDATA[<]]>#statureEnd#
            </isNotNull>
            </isPropertyAvailable>
            
             <isPropertyAvailable property="nation">
            <isNotEmpty prepend=" and " property="nation.id">
            	nation=#nation.id#
            </isNotEmpty>
            </isPropertyAvailable>
             <isPropertyAvailable property="faith">
             <isNotEmpty prepend=" and " property="faith.id">
            	faith =#faith.id#
            </isNotEmpty>
            </isPropertyAvailable>
            <isNotNull property="schooling.id" prepend=" and ">
					schooling = #schooling.id#
				</isNotNull>
            <isPropertyAvailable property="healthState">
            <isNotEmpty prepend=" and " property="healthState.id">
            	healthState=#healthState.id#
            </isNotEmpty>
            </isPropertyAvailable>
            <isPropertyAvailable property="bloodType">
             <isNotEmpty prepend=" and " property="bloodType.id">
            	bloodType=#bloodType.id#
            </isNotEmpty>
            </isPropertyAvailable>
            <isPropertyAvailable property="email">
            <isNotEmpty prepend=" and " property="email">
            	email like '%'||#email#||'%'
            </isNotEmpty>
            </isPropertyAvailable>
            <isPropertyAvailable property="workUnit">
             <isNotEmpty prepend=" and " property="workUnit">
            	workUnit like '%'||#workUnit#||'%'
            </isNotEmpty>
            </isPropertyAvailable>
			<isPropertyAvailable property="career" >
				<isNotEmpty property="career.id" prepend=" and ">
					career = #career.id#
				</isNotEmpty>
		</isPropertyAvailable>
		<isPropertyAvailable property="isEmphasis">
				<isNotNull property="isEmphasis" prepend=" and ">
					<isEqual property="isEmphasis" compareValue="1">
						isEmphasis = #isEmphasis#
					</isEqual>
					<isEqual property="isEmphasis" compareValue="0">
						isEmphasis = #isEmphasis# 
					</isEqual>
				</isNotNull>
			</isPropertyAvailable>
			
			<isPropertyAvailable property="isDeath" >
				<isNotNull property="isDeath" prepend=" and ">
					<isEqual property="isDeath" compareValue="1">
						isDeath = #isDeath#
					</isEqual>
					<isEqual property="isDeath" compareValue="0">
						(isDeath = #isDeath# or isDeath is null)
					</isEqual>
				</isNotNull>
			</isPropertyAvailable>
			<isNotNull property="staffTypeId" prepend=" and ">
				hDicts.PROPERTYDICTID in
				<iterate property="staffTypeId" close=")" open="("
					conjunction=",">
					#staffTypeId[]#
				</iterate>
			</isNotNull>
			<isNotNull property="isStayInSchool" prepend="and">
				isStayInSchool=#isStayInSchool#
			</isNotNull>
			<isNotEmpty property="schoolName" prepend="and">
				schoolName like #schoolName#||'%'
			</isNotEmpty>
			<include refid="attentionPopulationBaseInfo.serviceTeamInfoForSearch"/>
         </dynamic>
	</sql>
	<select id="countSearchIdleYouth" parameterClass="searchIdleYouthVo" resultClass="int">
		select count( distinct uni.id)
		<include refid="sql_where" />
	</select>
	<select id="findSearchIdleYouth" parameterClass="map" resultMap="idleYouth.idleYouthResult">
		select <include refid="fields"/>,<include refid="baseInfo.baseInfoFields"/>,<include refid="addressInfo.addressInfoFields"/>
		from idleYouths uni left join baseinfo b on uni.baseInfoId=b.id <include refid="addressInfo.joinAddressInfo"/> 
		where isEmphasis =0
	</select>
	<select id="searchIdleYouth" parameterClass="searchIdleYouthVo" resultMap="idleYouth.idleYouthResultForList">
		select distinct <include refid="fields"/>,<include refid="baseInfo.baseInfoFields"/>,<include refid="addressInfo.addressInfoFields"/>,'$attentionPopulationType$' as populationType
		<include refid="sql_where" />
		<dynamic prepend="order by">
			<isPropertyAvailable property="sortField">
				<isNotEmpty property="sortField">$sortField$
			  </isNotEmpty>
				<isNotEmpty property="order">$order$</isNotEmpty>
			</isPropertyAvailable>
		</dynamic>
	</select>
		<select id="findIdleYouthNameAndPinyinAndOrgInternalCode" parameterClass="java.util.Map" resultMap="idleYouth.idleYouthResult">
		select <include refid="fields"/>,<include refid="baseInfo.baseInfoFields"/>,<include refid="addressInfo.addressInfoFields"/> 
		from idleYouths uni left join baseinfo b on uni.baseInfoId=b.id <include refid="addressInfo.joinAddressInfo"/> 
		where (name like '$name$%' or fullPinyin like '$name$%' or simplePinyin like '$name$%' ) 
		and uni.orgInternalCode like #orgInternalCode#||'%' order by uni.id
	</select>

	<select id="getCountIdleyouthByOrgInternalCodeAndMap" parameterClass="java.util.Map" resultClass="int">
		select count(id) from idleYouths uni where  uni.orgInternalCode like #orgInternalCode#||'%'
		<dynamic>
			<isPropertyAvailable property="isHelped">
				<isNotNull property="isHelped" prepend=" and ">
					<isEqual property="isHelped" compareValue="1">
						uni.id in (select personId from helpPersonnels where personType = 'idleYouth')
					</isEqual>
					<isEqual property="isHelped" compareValue="0">
						uni.id not in (select personId from helpPersonnels where personType = 'idleYouth')
					</isEqual>
				</isNotNull>
			</isPropertyAvailable>
			<isPropertyAvailable property="staffType">
				<isNotNull property="staffType" prepend=" and ">
					uni.STAFFTYPE = #staffType#
				</isNotNull>
			</isPropertyAvailable>
			and uni.isEmphasis =0
		</dynamic>
	</select>
</sqlMap>