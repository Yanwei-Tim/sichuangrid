package com.tianque.plugin.taskList.controller;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import org.apache.struts2.convention.annotation.Action;
import org.apache.struts2.convention.annotation.Actions;
import org.apache.struts2.convention.annotation.Namespace;
import org.apache.struts2.convention.annotation.Result;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Controller;
import org.tinygroup.commons.tools.StringUtil;

import com.tianque.controller.ControllerHelper;
import com.tianque.controller.annotation.EncryptAnnotation;
import com.tianque.core.base.BaseAction;
import com.tianque.core.util.CalendarUtil;
import com.tianque.core.util.FileUtil;
import com.tianque.core.util.ThreadVariable;
import com.tianque.core.vo.GridPage;
import com.tianque.domain.Organization;
import com.tianque.domain.PropertyDict;
import com.tianque.domain.property.OrganizationLevel;
import com.tianque.domain.property.OrganizationType;
import com.tianque.domain.property.PropertyTypes;
import com.tianque.plugin.taskList.constants.Constants;
import com.tianque.plugin.taskList.domain.HiddenDanger;
import com.tianque.plugin.taskList.domain.HiddenDangerVo;
import com.tianque.plugin.taskList.domain.TaskListAttachFile;
import com.tianque.plugin.taskList.service.HiddenDangerService;
import com.tianque.sysadmin.service.OrganizationDubboService;
import com.tianque.sysadmin.service.PropertyDictService;

@Scope("request")
@Namespace("/baseInfo/hiddenDangerManage")
@Controller("hiddenDangerController")
public class HiddenDangerController extends BaseAction {

	@Autowired
	private OrganizationDubboService organizationDubboService;
	@Autowired
	private HiddenDangerService hiddenDangerService;
	@Autowired
	private PropertyDictService propertyDictService;

	private Long id;

	private Long orgid;

	private String ids;

	private Long keyId;

	/**
	 * 判断当前用户是否可以签收
	 */
	private Boolean flag;

	private HiddenDanger hiddenDanger;

	private HiddenDangerVo hiddenDangerVo;
	
	/** 附件名字 */
	private String[] attachFileNames;
	
	/**手机端2个及2个以上图片*/
	private String[] attachFile;
	
	/**手机端1个图片*/
	private String[] attachFiles;

	/**异常类型*/
	private String exceptionType;
	
	/**
	 * 判断当前类型是否为网格
	 */
	private Boolean isGrid;

	@Action(value = "searchHiddenDangerByVo", results = {
			@Result(name = "success", type = "json", params = { "root", "gridPage",
					"ignoreHierarchy", "false" }),
			@Result(name = "error", type = "json", params = { "root", "errorMessage",
					"ignoreHierarchy", "false" }) })
	public String searchHiddenDangerByVo() throws Exception {
		if(getTqmobile()!=null){
			hiddenDangerVo.setMode(getTqmobile());
		}
		gridPage = new GridPage(ControllerHelper.processAllOrgRelativeName(hiddenDangerService
				.searchHiddenDanger(hiddenDangerVo, exceptionType, page, rows, sidx, sord),
				organizationDubboService, new String[] { "organization" }, null));

		return SUCCESS;
	}

	@Action(value = "addHiddenDanger", results = {
			@Result(name = "success", type = "json", params = { "root", "true", "ignoreHierarchy",
					"false" }),
			@Result(name = "error", type = "json", params = { "root", "errorMessage",
					"ignoreHierarchy", "false" }) })
	public String addHiddenDanger() throws Exception {

		hiddenDangerService.addHiddenDanger(hiddenDanger, attachFile, attachFiles, attachFileNames);
		return SUCCESS;
	}

	@Action(value = "updateHiddenDanger", results = {
			@Result(name = "success", type = "json", params = { "root", "true", "ignoreHierarchy",
					"false" }),
			@Result(name = "error", type = "json", params = { "root", "errorMessage",
					"ignoreHierarchy", "false" }) })
	public String updateHiddenDanger() throws Exception {

		hiddenDangerService.updateHiddenDanger(hiddenDanger);
		return SUCCESS;
	}

	@Action(value = "updateHiddenDangerSignDetail", results = {
			@Result(name = "success", type = "json", params = { "root", "true", "ignoreHierarchy",
					"false" }),
			@Result(name = "error", type = "json", params = { "root", "errorMessage",
					"ignoreHierarchy", "false" }) })
	public String updateHiddenDangerSignDetail() throws Exception {

		hiddenDangerService.updateHiddenDangerSignDetail(hiddenDanger);
		return SUCCESS;
	}

	@Action(value = "deleteHiddenDanger", results = {
			@Result(name = "success", type = "json", params = { "root", "true", "ignoreHierarchy",
					"false" }),
			@Result(name = "error", type = "json", params = { "root", "errorMessage",
					"ignoreHierarchy", "false" }) })
	public String deleteHiddenDanger() throws Exception {
		hiddenDangerService.deleteHiddenDanger(analyzeIds(ids));
		return SUCCESS;
	}

	@Action(value = "getHiddenDangerById", results = {
			@Result(name = "success", type = "json", params = { "root", "hiddenDanger",
					"ignoreHierarchy", "false" }),
			@Result(name = "error", type = "json", params = { "root", "errorMessage",
					"ignoreHierarchy", "false" }) })
	public String getHiddenDangerById() throws Exception {
		if (hiddenDanger != null && hiddenDanger.getId() != null) {

			hiddenDanger = hiddenDangerService.getHiddenDangerById(hiddenDanger.getId());
		}
		return SUCCESS;
	}

	@Action(value = "updatePage", results = {
			@Result(name = "success", location = "/task/hiddenDanger/mainHiddenDangerDlg.jsp"),
			@Result(name = "error", type = "json", params = { "root", "errorMessage" }) })
	public String updatePage() throws Exception {

		hiddenDanger = hiddenDangerService.getHiddenDangerById(id);
		hiddenDanger.setSignDate(CalendarUtil.now());
		hiddenDanger.setSignUserName(ThreadVariable.getUser().getName());

		return SUCCESS;
	}

	@Action(value = "searchPage", results = {
			@Result(name = "success", location = "/template/task/hiddenDanger/searchHiddenDangerDlg.ftl"),
			@Result(name = "error", type = "json", params = { "root", "errorMessage" }) })
	public String searchPage() throws Exception {
		return SUCCESS;
	}

	/**
	 * 查看
	 * 
	 * @return SUCCESS
	 */
	@Actions({ @Action(value = "viewHiddenDanger", results = { @Result(name = "success", location = "/task/hiddenDanger/hiddenDangerView.jsp") }) })
	@EncryptAnnotation
	public String viewHiddenDanger() throws Exception {
		if (hiddenDanger != null && hiddenDanger.getId() != null) {
			hiddenDanger = hiddenDangerService.getHiddenDangerById(hiddenDanger.getId());
			hiddenDanger.getOrganization().setOrgName(
					ControllerHelper.getOrganizationRelativeName(hiddenDanger.getOrganization()
							.getId(), organizationDubboService));
		}
		return SUCCESS;
	}

	@Action(value = "addPage", results = {
			@Result(name = "success", location = "/task/hiddenDanger/mainHiddenDangerForAdd.jsp"),
			@Result(name = "error", type = "json", params = { "root", "errorMessage" }) })
	public String addPage() throws Exception {

		hiddenDanger.setDiscoverDate(CalendarUtil.now());

		return SUCCESS;
	}

	@Action(value = "updatePageForAll", results = {
			@Result(name = "success", location = "/task/hiddenDanger/mainHiddenDangerForAdd.jsp"),
			@Result(name = "error", type = "json", params = { "root", "errorMessage" }) })
	public String updatePageForAll() throws Exception {
		if (id == null) {
			this.errorMessage = "参数错误，未取到id";
			return ERROR;
		}
		hiddenDanger = hiddenDangerService.getHiddenDangerById(id);
		hiddenDanger.setOrganization(organizationDubboService.getFullOrgById(hiddenDanger
				.getOrganization().getId()));

		return SUCCESS;
	}

	@Action(value = "getHiddenDangerIsSign", results = {
			@Result(type = "json", name = "success", params = { "root", "flag", "ignoreHierarchy",
					"false" }),
			@Result(type = "json", name = "error", params = { "root", "false", "ignoreHierarchy",
					"false" }) })
	public String getHiddenDangerIsSign() throws Exception {
		flag = false;
		Organization currentUserOrg = ThreadVariable.getUser().getOrganization();
		// 获取职能部门
		PropertyDict orgTypeDict = propertyDictService
				.findPropertyDictByDomainNameAndDictDisplayName(PropertyTypes.ORGANIZATION_TYPE,
						OrganizationType.FUNCTION_KEY);
		// 获取职能部门类型（公安部门，司法部门。。）
		PropertyDict functionOrgTypeDict = propertyDictService
				.findPropertyDictByDomainNameAndDictDisplayName(PropertyTypes.FUNCTIONAL_ORG_TYPE,
						Constants.POLICE_DEPARTMENT);
		// 获取组织结构层级（乡镇，县区）
		PropertyDict orgLevelDict = propertyDictService
				.findPropertyDictByDomainNameAndDictDisplayName(PropertyTypes.ORGANIZATION_LEVEL,
						OrganizationLevel.TOWN_KEY);
		if (currentUserOrg.getOrgType().getId().equals(orgTypeDict.getId())
				&& currentUserOrg.getOrgLevel().getId().equals(orgLevelDict.getId())
				&& currentUserOrg.getFunctionalOrgType().getId()
						.equals(functionOrgTypeDict.getId())) {
			flag = true;
		}
		return SUCCESS;
	}

	@Action(value = "dispatchOperateByEncrypt", results = {
			@Result(name = "success", location = "/task/hiddenDanger/hiddenDangerViewDlg.jsp"),
			@Result(name = "error", type = "json", params = { "root", "errorMessage" }) })
	@EncryptAnnotation
	public String dispatchOperateByEncrypt() throws Exception {

		hiddenDanger = hiddenDangerService.getHiddenDangerById(hiddenDanger.getId());

		return SUCCESS;
	}
	
	
	private File createStoreFile(String path, String fileName)
			throws IOException {
		String downFilePath = FileUtil.getWebRoot() + File.separator + path;
		downloadFileName = new String(fileName.getBytes("gbk"), "ISO8859-1");
		File storedFile = new File(downFilePath);
		if (!storedFile.exists()) {
			storedFile.createNewFile();
		}
		return storedFile;
	}
	
	/*@Action(value = "downloadCompanyPlaceAnnexAttachFile")
	public String downloadHiddenDangerAnnexAttachFile() throws Exception {
		if (null == keyId) {
			errorMessage = "参数不正确";
			return ERROR;
		}
		hiddenDangerAnnex = companyPlaceAnnexService
				.getCompanyPlaceAnnex(companyPlaceAnnex.getId());

	/***************************************************************************
	 * 下载事件附件
	 * 
	 * @return
	 */
	@Action(value = "downLoadAttachFile", results = { @Result(name = "error", type = "json", params = {
			"root", "errorMessage" }) })
	public String downLoadActualFile() throws Exception {
		if (null != keyId) {
			TaskListAttachFile file = hiddenDangerService.getHiddenDangerAnenx(keyId);
			if (file != null) {
				try {
					inputStream = new java.io.FileInputStream(createStoreFile(
							file.getPhysicsFullFileName(), file.getFileName()));
				} catch (Exception e) {
					this.errorMessage = e.getMessage();
					return ERROR;
				}
				return "streamSuccess";
			}
		}
		return "";
	}


	/*@Action(value = "downloadCompanyPlaceAnnexAttachFile")
	public String downloadHiddenDangerAnnexAttachFile() throws Exception {
		if (null == keyId) {
			errorMessage = "参数不正确";
			return ERROR;
		}
		hiddenDangerAnnex = companyPlaceAnnexService
				.getCompanyPlaceAnnex(companyPlaceAnnex.getId());

		if (null == companyPlaceAnnex) {
			errorMessage = "附件不存在";
			return ERROR;
		}
		try {
			inputStream = new java.io.FileInputStream(FileUtil.getWebRoot()
					+ File.separator + companyPlaceAnnex.getAnnexAddress());
			downloadFileName = new String(companyPlaceAnnex.getFileName()
					.getBytes("gbk"), "ISO8859-1");
		} catch (FileNotFoundException e) {
			errorMessage = "附件文件不存在";
			return ERROR;
		} catch (UnsupportedEncodingException uee) {
			errorMessage = "文件编码格式不正确";
			return ERROR;
		}
		return STREAM_SUCCESS;
	}
	*/

	private List<Long> analyzeIds(String ids) {
		if (ids == null) {
			return null;
		}
		String[] deleteId = ids.split(",");
		List<Long> idList = new ArrayList<Long>();
		if (StringUtil.isEmpty(deleteId[0])) {
			return null;
		} else {
			for (int i = 0; i < deleteId.length; i++) {
				idList.add(Long.parseLong(deleteId[i]));
			}
		}
		return idList;
	}

	public Long getId() {
		return id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	public Long getOrgid() {
		return orgid;
	}

	public void setOrgid(Long orgid) {
		this.orgid = orgid;
	}

	public String getIds() {
		return ids;
	}

	public void setIds(String ids) {
		this.ids = ids;
	}

	public HiddenDanger getHiddenDanger() {
		return hiddenDanger;
	}

	public void setHiddenDanger(HiddenDanger hiddenDanger) {
		this.hiddenDanger = hiddenDanger;
	}

	public HiddenDangerVo getHiddenDangerVo() {
		return hiddenDangerVo;
	}

	public void setHiddenDangerVo(HiddenDangerVo hiddenDangerVo) {
		this.hiddenDangerVo = hiddenDangerVo;
	}

	public Boolean getFlag() {
		return flag;
	}

	public void setFlag(Boolean flag) {
		this.flag = flag;
	}

	public String[] getAttachFileNames() {
		return attachFileNames;
	}

	public void setAttachFileNames(String[] attachFileNames) {
		this.attachFileNames = attachFileNames;
	}

	public String[] getAttachFile() {
		return attachFile;
	}

	public void setAttachFile(String[] attachFile) {
		this.attachFile = attachFile;
	}

	public String[] getAttachFiles() {
		return attachFiles;
	}

	public void setAttachFiles(String[] attachFiles) {
		this.attachFiles = attachFiles;
	}

	public Long getKeyId() {
		return keyId;
	}

	public void setKeyId(Long keyId) {
		this.keyId = keyId;
	}

	public String getExceptionType() {
		return exceptionType;
	}

	public void setExceptionType(String exceptionType) {
		this.exceptionType = exceptionType;
	}

	public Boolean getIsGrid() {
		return isGrid;
	}

	public void setIsGrid(Boolean isGrid) {
		this.isGrid = isGrid;
	}

}
