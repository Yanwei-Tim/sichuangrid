package com.tianque.util;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import org.apache.commons.httpclient.HttpClient;
import org.apache.commons.httpclient.NameValuePair;
import org.apache.commons.httpclient.methods.PostMethod;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.tianque.core.util.EncryptUtil;
import com.tianque.plugin.weChat.proxy.util.UTF8PostMethod;

/**
 * @ClassName: HttpClientUtils
 * @Description: HTTP请求工具类（事件与呼叫中心对接时创建）
 * @author wangxiaohu wsmalltiger@163.com
 * @date 2014年10月24日 下午3:00:33
 */
public class HttpClientUtils {
	static Logger logger = LoggerFactory.getLogger(HttpClientUtils.class);

	/**
	 * @Description: 执行请求
	 * @author wangxiaohu wsmalltiger@163.com
	 * @param httpMethod
	 *            请求方式
	 * @param url
	 *            请求链接
	 * @param params
	 *            请求参数
	 * @return 请求结果
	 * @throws
	 */
	private static String execute(String url, Map<String, String> params) {
		HttpClient client = new HttpClient();
		Map<String, String> urlMap = convertUrl(url);
		client.getHostConfiguration().setHost(urlMap.get("host"),
				Integer.parseInt(urlMap.get("port")));
		String postUrl = urlMap.get("url");
		PostMethod post = new UTF8PostMethod(postUrl.replace("//", "/"));
		try {
			params = params == null ? new HashMap<String, String>() : params;
			params.put("_",
					EncryptUtil.md5Encrypt(System.currentTimeMillis() + "")
							.hashCode() + "");
			List<NameValuePair> nameValuePairList = parameterConvert(params);
			NameValuePair[] nameValuePairs = new NameValuePair[nameValuePairList
					.size()];
			nameValuePairList.toArray(nameValuePairs);
			post.setRequestBody(nameValuePairs);
			client.executeMethod(post);
			return post.getResponseBodyAsString();
		} catch (Exception e) {
			logger.error(e.getMessage(), e);
		} finally {
			post.releaseConnection();
		}
		return null;
	}

	private static Map<String, String> convertUrl(String url) {
		String errorMessage = "[" + url + "]URL不合法！";
		if (url == null || "".equals(url)) {
			throw new NullPointerException(errorMessage);
		}
		Map<String, String> urlMap = new HashMap<String, String>();
		try {
			url = url.indexOf("://") == -1 ? url : url.substring(url
					.indexOf("://") + 3);
			String[] hostPort = url.substring(0, url.indexOf("/")).split(":");
			if ("".equals(hostPort[0])) {
				throw new NullPointerException(errorMessage + "无法确定服务器地址！");
			}
			urlMap.put("host", hostPort[0]);
			int port = 80;
			try {
				port = Integer.parseInt(hostPort[1]);
			} catch (Exception e) {
			}
			urlMap.put("port", port + "");
			urlMap.put("url", url.substring(url.indexOf("/")));
		} catch (Exception e) {
			logger.error(errorMessage, e);
		}
		return urlMap;
	}

	/**
	 * @Description: 发送post请求
	 * @author wangxiaohu wsmalltiger@163.com
	 * @param url
	 *            请求链接
	 * @param params
	 *            请求参数
	 * @return 返回结果
	 * @throws
	 */
	public static String post(String url, Map<String, String> params) {
		return execute(url, params);
	}

	private static List<NameValuePair> parameterConvert(
			Map<String, String> params) {
		if (params == null || params.isEmpty()) {
			return null;
		}
		List<NameValuePair> httpParams = new ArrayList<NameValuePair>();
		for (Entry<String, String> param : params.entrySet()) {
			httpParams.add(new NameValuePair(param.getKey(), param.getValue()));
		}
		return httpParams;
	}
}