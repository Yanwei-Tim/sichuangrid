package com.tianque.baseInfo.otherAttentionPersonnel.service;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Service;

import com.tianque.baseInfo.actualHouse.domain.HouseInfo;
import com.tianque.baseInfo.actualHouse.service.ActualHouseService;
import com.tianque.baseInfo.base.domain.ActualPopulation;
import com.tianque.baseInfo.base.domain.Countrymen;
import com.tianque.baseInfo.base.domain.LogoutDetail;
import com.tianque.baseInfo.base.service.BaseInfoPopulationTemplateImpl;
import com.tianque.baseInfo.base.service.BaseInfoService;
import com.tianque.baseInfo.base.service.PopulationRelationService;
import com.tianque.baseInfo.otherAttentionPersonnel.dao.OtherAttentionPersonnelDao;
import com.tianque.baseInfo.otherAttentionPersonnel.domain.OtherAttentionPersonnel;
import com.tianque.cache.PageInfoCacheThreadLocal;
import com.tianque.cache.UpdateType;
import com.tianque.core.cache.constant.MemCacheConstant;
import com.tianque.core.datatransfer.ExcelImportHelper;
import com.tianque.core.systemLog.util.OperatorType;
import com.tianque.core.util.BaseInfoTables;
import com.tianque.core.util.Chinese2pinyin;
import com.tianque.core.util.NewBaseInfoTables;
import com.tianque.core.util.ObjectToJSON;
import com.tianque.core.util.StringUtil;
import com.tianque.core.util.ThreadVariable;
import com.tianque.core.validate.ValidateResult;
import com.tianque.core.vo.PageInfo;
import com.tianque.domain.Organization;
import com.tianque.domain.property.PropertyTypes;
import com.tianque.exception.base.BusinessValidationException;
import com.tianque.exception.base.ServiceValidationException;
import com.tianque.service.HousePopulationMaintanceService;
import com.tianque.service.IssueTypeService;
import com.tianque.service.PopulationProccessorService;
import com.tianque.service.helper.ManagePopulationByHouseHelper;
import com.tianque.service.util.PopulationCatalog;
import com.tianque.service.util.PopulationType;
import com.tianque.service.vo.IsEmphasis;
import com.tianque.sysadmin.service.OrganizationDubboService;
import com.tianque.sysadmin.service.PropertyDictService;
import com.tianque.util.Arrays;
import com.tianque.util.IdCardUtil;
import com.tianque.util.PluginServiceHelpUtil;
import com.tianque.validate.AbstractCountrymenValidator;

@Service("otherAttentionPersonnelService")
public class OtherAttentionPersonnelServiceImpl extends
		BaseInfoPopulationTemplateImpl implements
		OtherAttentionPersonnelService, PopulationProccessorService {

	private static final String CACHE_ADDOTHERATTENTIONPERSONNEL_VALUE = "CACHE_ADDOTHERATTENTIONPERSONNEL";
	private static final String CACHE_ADDOTHERATTENTIONPERSONNELBASEINFO_VALUE = "CACHE_ADDOTHERATTENTIONPERSONNELBASEINFO";
	@Autowired
	private OrganizationDubboService organizationDubboService;

	@Autowired
	OtherAttentionPersonnelDao otherAttentionPersonnelDao;

	@Qualifier("otherAttentionPersonnelValidator")
	@Autowired
	private AbstractCountrymenValidator<OtherAttentionPersonnel> updateValidator;
	@Autowired
	private IssueTypeService issueTypeService;
	@Autowired
	private PropertyDictService propertyDictService;
	@Autowired
	private ActualHouseService actualHouseService;
	@Autowired
	private ManagePopulationByHouseHelper managePopulationByHouseHelper;
	@Autowired
	private HousePopulationMaintanceService housePopulationMaintanceService;
	@Autowired
	private PopulationRelationService populationRelationService;
	@Autowired
	private BaseInfoService baseInfoService;

	// @Autowired
	// private CacheService cacheService;

	@Resource(name = "otherAttentionPersonnelDao")
	public void setBaseInfoPopulationBaseDao(
			OtherAttentionPersonnelDao otherAttentionPersonnelDao) {
		super.setBaseInfoPopulationBaseDao(otherAttentionPersonnelDao);
	}

	@Override
	public Long proccessPopulationSpecializedInfo(
			ActualPopulation actualPopulation, String[] populationType,
			Map<String, Object> population) {
		actualPopulation
				.setAttentionPopulationType(NewBaseInfoTables.OTHERATTENTIONPERSONNEL_KEY);
		Long orgId = Long
				.valueOf(((String[]) population.get("organization.id"))[0]);
		String idCardNo = ((String[]) population.get("idCardNo"))[0];
		OtherAttentionPersonnel otherAttentionPersonnel = otherAttentionPersonnelDao
				.getByOrgIdAndIdCardNo(orgId, idCardNo);
		if (!com.tianque.util.Arrays.hasObjectInArray(populationType,
				PopulationType.OTHER_ATTENTION_PERSONNEL)) {
			if (null != otherAttentionPersonnel) {
				otherAttentionPersonnel.setIsEmphasis(IsEmphasis.IsNotEmphasis);
				updateEmphasiseById(otherAttentionPersonnel.getId(),
						IsEmphasis.IsNotEmphasis);
			}
		} else {
			if (null == otherAttentionPersonnel) {
				otherAttentionPersonnel = new OtherAttentionPersonnel();
				copyProperty(actualPopulation, population,
						otherAttentionPersonnel);
				addOtherAttentionPersonnel(otherAttentionPersonnel);
			} else {
				Long id = otherAttentionPersonnel.getId();
				copyProperty(actualPopulation, population,
						otherAttentionPersonnel);
				otherAttentionPersonnel.setId(id);
				otherAttentionPersonnel.setIsEmphasis(IsEmphasis.Emphasis);
				updateOtherAttentionPersonnelBusiness(otherAttentionPersonnel);
				updateEmphasiseById(otherAttentionPersonnel.getId(),
						IsEmphasis.Emphasis);
			}
		}
		return otherAttentionPersonnel == null
				|| otherAttentionPersonnel.getIsEmphasis() == IsEmphasis.IsNotEmphasis
						.longValue() ? null : otherAttentionPersonnel.getId();
	}

	private void updateEmphasiseById(Long id, Long isEmphasis) {
		LogoutDetail logoutDetail = new LogoutDetail();
		logoutDetail.setLogout(isEmphasis);
		updateLogOutByPopulationTypeAndId(logoutDetail,
				BaseInfoTables.OTHERATTENTIONPERSONNEL_KEY, id);
	}

	@Override
	public OtherAttentionPersonnel updateOtherAttentionPersonnel(
			OtherAttentionPersonnel otherAttentionPersonnel) {

		if (!ExcelImportHelper.isImport.get()) {
			otherAttentionPersonnelValidator(otherAttentionPersonnel);
		}
		try {
			autoFillFields(otherAttentionPersonnel);
			if (otherAttentionPersonnel.isDeath()) {
				otherAttentionPersonnel.setIsEmphasis(IsEmphasis.IsNotEmphasis);
				deletePopulationTypeByPopulationIdAndType(
						otherAttentionPersonnel.getId(),
						PopulationType.OTHER_ATTENTION_PERSONNEL);
			}
			otherAttentionPersonnel = otherAttentionPersonnelDao
					.update(otherAttentionPersonnel);
			return otherAttentionPersonnel;
		} catch (Exception e) {
			throw new ServiceValidationException(
					"类otherAttentionPersonnelServiceImpl的updateotherAttentionPersonnel方法出现异常，原因：",
					"修改信息出现错误", e);
		}
	}

	private void otherAttentionPersonnelValidator(
			OtherAttentionPersonnel otherAttentionPersonnel) {
		ValidateResult baseDataValidator = updateValidator
				.validate(otherAttentionPersonnel);
		if (baseDataValidator.hasError()) {
			throw new BusinessValidationException(
					baseDataValidator.getErrorMessages());
		}
	}

	@Override
	public OtherAttentionPersonnel addOtherAttentionPersonnel(
			OtherAttentionPersonnel otherAttentionPersonnel) {
		if (!ExcelImportHelper.isImport.get()) {
			otherAttentionPersonnelValidator(otherAttentionPersonnel);
		}
		try {
			if (checkDataExitInCache(otherAttentionPersonnel,
					MemCacheConstant.CACHE_ADDOTHERATTENTIONPERSONNEL,
					CACHE_ADDOTHERATTENTIONPERSONNEL_VALUE)) {
				return otherAttentionPersonnel;
			}
			return add(otherAttentionPersonnel);
		} catch (Exception e) {
			logger.error("", e);
			if (!ExcelImportHelper.isImport.get()) {
				throw new BusinessValidationException("新增信息出现错误");
			} else {
				return null;
			}
		} finally {
			cleanDataInCache(otherAttentionPersonnel,
					MemCacheConstant.CACHE_ADDOTHERATTENTIONPERSONNEL);
		}
	}

	private void copyProperty(ActualPopulation actualPopulation,
			Map<String, Object> population,
			OtherAttentionPersonnel otherAttentionPersonnel) {

		copyProperties(otherAttentionPersonnel, actualPopulation);
		otherAttentionPersonnel.setAttentionReason(Arrays
				.getStringValueFromArray(population, "attentionReason"));
		otherAttentionPersonnel.setAttentionExtent(Arrays
				.getPropertyDictFromArray(population, "attentionExtent.id"));
		otherAttentionPersonnel.setWorkCondition(Arrays
				.getStringValueFromArray(population, "workCondition"));

		otherAttentionPersonnel.setMeRemark(Arrays.getStringValueFromArray(
				population, "meRemark"));
		otherAttentionPersonnel
				.setAttentionPopulationType(BaseInfoTables.OTHERATTENTIONPERSONNEL_KEY);

	}

	@Override
	public Map<String, Map<String, Object>> getPopulationSpecializedInfoByOrgIdAndIdCardNo(
			Long orgId, String idCardNo) {
		OtherAttentionPersonnel otherAttentionPersonnel = otherAttentionPersonnelDao
				.getByOrgIdAndIdCardNo(orgId, idCardNo);
		if (null == otherAttentionPersonnel) {
			return null;
		}
		Map<String, Object> dangerousGoodsPractitionerMap = new HashMap<String, Object>();
		dangerousGoodsPractitionerMap
				.put("id", otherAttentionPersonnel.getId());
		dangerousGoodsPractitionerMap.put("isEmphasis",
				otherAttentionPersonnel.getIsEmphasis());
		dangerousGoodsPractitionerMap.put("workUnit",
				otherAttentionPersonnel.getWorkUnit());
		dangerousGoodsPractitionerMap.put("attentionReason",
				otherAttentionPersonnel.getAttentionReason());
		dangerousGoodsPractitionerMap.put("attentionExtent",
				otherAttentionPersonnel.getAttentionExtent());
		Map<String, Map<String, Object>> map = new HashMap<String, Map<String, Object>>();
		map.put(PopulationType.OTHER_ATTENTION_PERSONNEL,
				dangerousGoodsPractitionerMap);
		return map;
	}

	@Override
	public void updatePopulationBaseInfo(ActualPopulation actualPopulation) {
		OtherAttentionPersonnel otherAttentionPersonnel = otherAttentionPersonnelDao
				.getByOrgIdAndIdCardNo(actualPopulation.getOrganization()
						.getId(), actualPopulation.getIdCardNo());
		if (null == otherAttentionPersonnel) {
			return;
		}
		Long id = otherAttentionPersonnel.getId();
		if (!StringUtil.isStringAvaliable(actualPopulation.getWorkUnit())) {
			actualPopulation.setWorkUnit(otherAttentionPersonnel.getWorkUnit());
		}
		copyProperties(otherAttentionPersonnel, actualPopulation);
		otherAttentionPersonnel.setId(id);
		updateOtherAttentionPersonnel(otherAttentionPersonnel);
	}

	@Override
	public void deletePopulationByPopulationId(Long populationId) {
		if (null != populationId) {
			this.deleteOtherAttentionPersonnelById(populationId);
			this.deletePopulationTypeByPopulationIdAndType(populationId,
					PopulationType.OTHER_ATTENTION_PERSONNEL);
		}
	}

	@Override
	public PageInfo<OtherAttentionPersonnel> findOtherAttentionPersonnelsForPageByOrgId(
			Long organizationId, Integer page, Integer rows, String sidx,
			String sord, Long isEmphasis) {
		if (organizationId == null) {
			return constructEmptyPageInfo();
		} else {
			Organization org = organizationDubboService
					.getSimpleOrgById(organizationId);
			if (org == null) {
				return constructEmptyPageInfo();
			} else {
				// return otherAttentionPersonnelDao
				// .findOtherAttentionPersonnelsForPageByOrgInternalCode(
				// org.getOrgInternalCode(), page, rows, sidx,
				// sord, isEmphasis);
				/*
				 * SearchOtherAttentionPersonnelVo otherAttentionPersonnelVo =
				 * new SearchOtherAttentionPersonnelVo();
				 * otherAttentionPersonnelVo.setOrgInternalCode(org
				 * .getOrgInternalCode());
				 * otherAttentionPersonnelVo.setPopulationType
				 * (BaseInfoTables.OTHERATTENTIONPERSONNEL_KEY);
				 * otherAttentionPersonnelVo.setIsEmphasis(isEmphasis); return
				 * otherAttentionPersonnelDao .findPagerUsingCacheBySearchVo(
				 * organizationId, otherAttentionPersonnelVo, page, rows, sidx,
				 * sord, MemCacheConstant
				 * .getCachePageKey(OtherAttentionPersonnel.class
				 * .getSimpleName()));
				 */
				Map<String, Object> query = new HashMap<String, Object>();
				query.put("orgInternalCode", org.getOrgInternalCode());
				query.put("isEmphasis", isEmphasis);
				PageInfo<OtherAttentionPersonnel> pageInfos = otherAttentionPersonnelDao
						.findPagerUsingCacheBySearchVo(
								organizationId,
								query,
								page,
								rows,
								"OtherAttentionPersonnelDefaultList",
								MemCacheConstant
										.getCachePageKey(OtherAttentionPersonnel.class));
				fitCountrymen(pageInfos);
				fitServiceMemberHasObject(
						BaseInfoTables.OTHERATTENTIONPERSONNEL_KEY, pageInfos);

				return pageInfos;

			}
		}
	}

	private PageInfo<OtherAttentionPersonnel> constructEmptyPageInfo() {
		PageInfo<OtherAttentionPersonnel> emptyPageInfo = new PageInfo<OtherAttentionPersonnel>();
		emptyPageInfo.setResult(new ArrayList<OtherAttentionPersonnel>());
		return emptyPageInfo;
	}

	@Override
	public Boolean existOtherAttentionPersonnel(Long orgId, String idCardNo,
			Long hopeId) {
		if (idCardNo == null || "".equals(idCardNo.trim()) || orgId == null) {
			return false;
		}
		idCardNo = idCardNo.toUpperCase();
		// String idCardNo15 = "";
		// String idCardNo18 = "";
		// if (idCardNo.length() == 15) {
		// idCardNo15 = idCardNo;
		// idCardNo18 = IdCardUtil.idCardNo15to18(idCardNo, "19");
		// } else if (idCardNo.length() == 18) {
		// idCardNo15 = IdCardUtil.idCardNo18to15(idCardNo);
		// idCardNo18 = idCardNo;
		// }
		Countrymen countrymen = baseInfoService.getBaseInfoByIdCardNo(idCardNo);
		if (countrymen == null) {
			return false;
		}
		Long dr = otherAttentionPersonnelDao.getIdByBaseinfoIdAndOrgId(
				countrymen.getId(), orgId);
		return hopeId == null ? dr != null
				: (dr != null && hopeId.longValue() != dr.longValue());
	}

	@Override
	public OtherAttentionPersonnel hasDuplicateOtherAttentionPersonnel(
			Long orgId, String idCardNo) {
		if (idCardNo == null || "".equals(idCardNo.trim()) || orgId == null) {
			return null;
		}
		try {
			idCardNo = idCardNo.toUpperCase();
			List<String> list = new ArrayList<String>();
			list.add(idCardNo);
			if (idCardNo.length() == 18) {
				list.add(IdCardUtil.idCardNo18to15(idCardNo));
			} else if (idCardNo.length() == 15) {
				list.add(IdCardUtil.idCardNo15to18(idCardNo, "19"));
				list.add(IdCardUtil.idCardNo15to18(idCardNo, "20"));
			}
			return otherAttentionPersonnelDao.getByIdCard(list, orgId);

		} catch (Exception e) {
			throw new ServiceValidationException(
					"类OtherAttentionPersonnelServiceImpl的hasDuplicateOtherAttentionPersonnel方法出现异常，原因：",
					"判断其他人员人员身份证号码是否存在出现错误", e);
		}
	}

	@Override
	public OtherAttentionPersonnel updateOtherAttentionPersonnelBaseInfo(
			OtherAttentionPersonnel population) {
		if (!ExcelImportHelper.isImport.get()) {
			ValidateResult baseDataValidator = updateValidator
					.validateBaseInfo(population);
			if (baseDataValidator.hasError()) {
				throw new BusinessValidationException(
						baseDataValidator.getErrorMessages());
			}
		}
		try {
			autoFillFields(population);
			if (population.isDeath()) {
				population.setLogoutDetail(buildLogoutDetail(population
						.isDeath()));
				// 缓存计数器
				PageInfoCacheThreadLocal.decrease(MemCacheConstant
						.getCachePageKey(OtherAttentionPersonnel.class
								.getSimpleName()), population, 1);
			}
			Countrymen temp = populationRelationService.businessOption(
					population, population.getActualPopulationType());
			contructCurrentAddress(population);
			population.setHouseId(temp.getHouseId());
			rebuildHouseAddress(population);
			otherAttentionPersonnelDao.updateTableUpdateDateById(population
					.getId());
			return population;
		} catch (Exception e) {
			throw new ServiceValidationException(
					"类OtherAttentionPersonnelServiceImpl的updateOtherAttentionPersonnelBaseInfo方法出现异常，原因：",
					"修改信息出现错误", e);
		}

	}

	private LogoutDetail buildLogoutDetail(Boolean death) {
		LogoutDetail result = new LogoutDetail();
		if (death) {
			result.setLogoutDate(new Date());
			result.setLogoutReason(LogoutDetail.LOGOUT_REASON_FOR_DEATH);
			result.setLogout(IsEmphasis.IsNotEmphasis);
		} else if (!death) {
			result.setLogout(IsEmphasis.Emphasis);
		}

		return result;
	}

	private void autoFillFields(OtherAttentionPersonnel otherAttentionPersonnel) {
		autoFillOrganizationInternalCode(otherAttentionPersonnel);
		autoFillChinesePinyin(otherAttentionPersonnel);
		autoFillBirthday(otherAttentionPersonnel);
		otherAttentionPersonnel.setIdCardNo(otherAttentionPersonnel
				.getIdCardNo().toUpperCase());
		autoIsDeath(otherAttentionPersonnel);
	}

	private void autoIsDeath(OtherAttentionPersonnel otherAttentionPersonnel) {
		if (otherAttentionPersonnel.isDeath()) {
			otherAttentionPersonnel.setIsEmphasis(IsEmphasis.IsNotEmphasis);
		} else {
			otherAttentionPersonnel.setIsEmphasis(IsEmphasis.Emphasis);
		}
	}

	private void autoFillOrganizationInternalCode(
			OtherAttentionPersonnel otherAttentionPersonnel) {
		Organization org = organizationDubboService
				.getSimpleOrgById(otherAttentionPersonnel.getOrganization()
						.getId());
		if (org == null)
			throw new BusinessValidationException("数据传入错误");
		otherAttentionPersonnel.setOrgInternalCode(org.getOrgInternalCode());
	}

	private void autoFillChinesePinyin(
			OtherAttentionPersonnel otherAttentionPersonnel) {
		Map<String, String> pinyin = Chinese2pinyin
				.changeChinese2Pinyin(otherAttentionPersonnel.getName());
		otherAttentionPersonnel.setSimplePinyin(pinyin.get("simplePinyin"));
		otherAttentionPersonnel.setFullPinyin(pinyin.get("fullPinyin"));
	}

	private void autoFillBirthday(
			OtherAttentionPersonnel otherAttentionPersonnel) {
		if (StringUtil.isStringAvaliable(otherAttentionPersonnel.getIdCardNo())) {
			otherAttentionPersonnel.setBirthday(IdCardUtil
					.parseBirthday(otherAttentionPersonnel.getIdCardNo()));
		}
	}

	@Override
	public OtherAttentionPersonnel addOtherAttentionPersonnelBaseInfo(
			OtherAttentionPersonnel population) {
		ValidateResult baseDataValidator = updateValidator
				.validateBaseInfo(population);
		if (baseDataValidator.hasError()) {
			throw new BusinessValidationException(
					baseDataValidator.getErrorMessages());
		}
		try {
			if (checkDataExitInCache(population,
					MemCacheConstant.CACHE_ADDOTHERATTENTIONPERSONNELBASEINFO,
					CACHE_ADDOTHERATTENTIONPERSONNELBASEINFO_VALUE)) {
				return population;
			}
			return add(population);
		} catch (Exception e) {
			logger.error("", e);
			if (!ExcelImportHelper.isImport.get()) {
				throw new BusinessValidationException("新增信息出现错误");
			} else {
				return null;
			}
		} finally {
			cleanDataInCache(population,
					MemCacheConstant.CACHE_ADDOTHERATTENTIONPERSONNELBASEINFO);
		}
	}

	private OtherAttentionPersonnel add(
			OtherAttentionPersonnel otherAttentionPersonnel) {
		autoFillFields(otherAttentionPersonnel);
		try {
			contructCurrentAddress(otherAttentionPersonnel);
			Countrymen temp = populationRelationService.businessOption(
					otherAttentionPersonnel,
					otherAttentionPersonnel.getActualPopulationType());
			otherAttentionPersonnel.setBaseInfoId(temp.getBaseInfoId());
			otherAttentionPersonnel.setAddressInfoId(temp.getAddressInfoId());
			otherAttentionPersonnel.setSourcesState(null);
			otherAttentionPersonnel = otherAttentionPersonnelDao
					.add(otherAttentionPersonnel);
			populationRelationService.addPopulationRelation(temp.getId(),
					otherAttentionPersonnel.getActualPopulationType(),
					otherAttentionPersonnel.getId(),
					BaseInfoTables.OTHERATTENTIONPERSONNEL_KEY);
			otherAttentionPersonnel.setHouseId(temp.getHouseId());
			rebuildHouseAddress(otherAttentionPersonnel);

			if (IsEmphasis.Emphasis.equals(otherAttentionPersonnel
					.getIsEmphasis())) {
				// 缓存计数器
				PageInfoCacheThreadLocal.increment(MemCacheConstant
						.getCachePageKey(OtherAttentionPersonnel.class
								.getSimpleName()), otherAttentionPersonnel, 1);
			}
			return otherAttentionPersonnel;
		} catch (Exception e) {
			throw new ServiceValidationException(
					"类OtherAttentionPersonnelServiceImpl的ad方法出现异常，原因：",
					"新增otherAttentionPersonnel信息出现错误", e);
		}
	}

	/**
	 * 如果人口的房屋信息（CurrentAddress）不为空，并且房屋id不存在，新增一个房屋，并且建立关联关系, 如果房屋id不为空直接建立关联关系
	 * 如果房屋信息为空,并且有房屋id不为空，则删除人房关系
	 * 
	 * @param householdStaff
	 */
	private void rebuildHouseAddress(OtherAttentionPersonnel householdStaff) {

		if (householdStaff.getIsHaveHouse() != null
				&& householdStaff.getIsHaveHouse()
				&& householdStaff.getCurrentAddress() != null) {

			if (null == householdStaff.getHouseId()
					|| householdStaff.getHouseId().equals(01L)) {
				// 新增一个实有房屋,并且建立人房关系
				HouseInfo houseInfo = new HouseInfo();
				houseInfo.setAddress(householdStaff.getCurrentAddress());
				houseInfo.setAddressType(propertyDictService
						.findPropertyDictByDomainNameAndDictDisplayName(
								PropertyTypes.CURRENT_ADDRESS_TYPE, "其他"));
				houseInfo.setOrganization(householdStaff.getOrganization());
				houseInfo
						.setHouseOperateSource(NewBaseInfoTables.OTHERATTENTIONPERSONNEL_KEY);
				houseInfo = actualHouseService.addHouseInfo(houseInfo);

				managePopulationByHouseHelper.reBindHouseIfNecc(
						PopulationCatalog.OTHER_ATTENTION_PERSONNEL,
						householdStaff, houseInfo.getId());
			} else if (householdStaff.getHouseId() != null) {
				managePopulationByHouseHelper.reBindHouseIfNecc(
						PopulationCatalog.OTHER_ATTENTION_PERSONNEL,
						householdStaff, householdStaff.getHouseId());
			}
		} else {
			housePopulationMaintanceService.releaseHouse(
					PopulationCatalog.OTHER_ATTENTION_PERSONNEL,
					householdStaff.getId(), householdStaff.getHouseId());
		}
	}

	@Override
	public OtherAttentionPersonnel updateOtherAttentionPersonnelBusiness(
			OtherAttentionPersonnel population) {
		if (!ExcelImportHelper.isImport.get()) {
			ValidateResult baseDataValidator = updateValidator
					.validateSpecializedInfo(population);
			if (baseDataValidator.hasError()) {
				throw new BusinessValidationException(
						baseDataValidator.getErrorMessages());
			}
		}
		try {

			population = otherAttentionPersonnelDao.updateBusiness(population);
			PageInfoCacheThreadLocal.update(MemCacheConstant
					.getCachePageKey(OtherAttentionPersonnel.class),
					population, UpdateType.BUSINESS);
			return population;
		} catch (Exception e) {
			throw new ServiceValidationException(
					"类OtherAttentionPersonnelServiceImpl的updateOtherAttentionPersonnelBusiness方法出现异常，原因：",
					"修改信息出现错误", e);
		}

	}

	@Override
	public List<Long> deleteOtherAttentionPersonnelByIds(List<Long> personIds) {
		if (personIds == null) {
			throw new BusinessValidationException("id没有获得");
		}
		for (Long id : personIds) {
			deleteOtherAttentionPersonnelById(id);
		}
		return personIds;
	}

	private void deleteOtherAttentionPersonnelById(Long id) {

		OtherAttentionPersonnel domain = otherAttentionPersonnelDao.get(id);
		if (null != domain) {
			log(WARN, DANGEROUSEGOODS_PRACTITIONER, ThreadVariable.getSession()
					.getUserName() + "删除其他人员" + domain.getName(),
					OperatorType.DELETE, ObjectToJSON.convertJSON(domain));

			domain.setPopulationTypeBean(getPopulationRelationService()
					.getBusinessPopulationTypeBean(id,
							PopulationType.OTHER_ATTENTION_PERSONNEL));
			getRecoverDatasService().deleteActualPopulation(domain);
			populationRelationService.businessDeletePopulationRelation(id,
					PopulationType.OTHER_ATTENTION_PERSONNEL);

			otherAttentionPersonnelDao.delete(id);
			try {
				PluginServiceHelpUtil.doService("routerService",
						"deleteServiceTeamHasObjectsAndServiceMemberHasObject",
						new Class[] { String.class, Long.class },
						PopulationType.OTHER_ATTENTION_PERSONNEL, id);
				/** 删除时对关联的事件和服务记录进行orgId和idCardNo赋值 */
				PluginServiceHelpUtil.doService("routerService",
						"setOrgIdAndCardNoOrName", new Class[] { Long.class,
								String.class, String.class, Long.class },
						domain.getOrganization().getId(), domain.getIdCardNo(),
						PopulationType.OTHER_ATTENTION_PERSONNEL, id);
				issueTypeService.setOrgIdAndCardNoOrNameForPerson(domain
						.getOrganization().getId(), domain.getIdCardNo(),
						"otherattention", id);

				if (IsEmphasis.Emphasis.equals(domain.getIsEmphasis())) {
					// 缓存计数器
					PageInfoCacheThreadLocal.decrease(MemCacheConstant
							.getCachePageKey(OtherAttentionPersonnel.class
									.getSimpleName()), domain, 1);
				}
				try {
					Thread.sleep(5000);
				} catch (InterruptedException e1) {
					logger.error("", e1);
				}
			} catch (Exception e) {
				logger.error("", e);
			}
		}

	}

	private boolean validateObjId(Long id) {
		return null == id || id < 1L;
	}

	@Override
	public OtherAttentionPersonnel getSimpleOtherAttentionPersonnelById(Long id) {
		if (validateObjId(id)) {
			throw new BusinessValidationException("获取其他人员时，ID不合法");
		}
		return otherAttentionPersonnelDao.get(id);
	}

	@Override
	public List<OtherAttentionPersonnel> updateDeathByIds(
			List<Long> populationIds, boolean death) {
		List<OtherAttentionPersonnel> list = new ArrayList<OtherAttentionPersonnel>();
		for (Long id : populationIds) {
			OtherAttentionPersonnel population = this
					.getSimpleOtherAttentionPersonnelById(id);
			updateLogOutByPopulationTypeAndId(
					LogoutDetail.buildLogoutDetail(death),
					BaseInfoTables.OTHERATTENTIONPERSONNEL_KEY,
					population.getId());
			baseInfoService.updateDeathStateById(population.getBaseInfoId(),
					death, population.getIdCardNo(), population
							.getOrganization().getId(), population
							.getOrgInternalCode(),
					NewBaseInfoTables.OTHERATTENTIONPERSONNEL_KEY);
			list.add(population);
			// 缓存计数器
			PageInfoCacheThreadLocal.increment(MemCacheConstant
					.getCachePageKey(OtherAttentionPersonnel.class
							.getSimpleName()), population, 1);
		}
		return list;
	}

	@Override
	public OtherAttentionPersonnel getOtherAttentionPersonnelByIdCardNo(
			String idCardNo, Long id) {
		if (idCardNo == null || "".equals(idCardNo.trim())) {
			return null;
		}
		List<String> list = new ArrayList<String>();
		list.add(idCardNo);
		if (idCardNo.length() == 18) {
			list.add(IdCardUtil.idCardNo18to15(idCardNo));
		} else if (idCardNo.length() == 15) {
			list.add(IdCardUtil.idCardNo15to18(idCardNo, "19"));
			list.add(IdCardUtil.idCardNo15to18(idCardNo, "20"));
		}
		return otherAttentionPersonnelDao.getByIdCard(list, id);
	}

	@Override
	public OtherAttentionPersonnel updateOtherAttentionPersonnelByName(
			String idCardNo, Long id, OtherAttentionPersonnel domain) {
		try {
			OtherAttentionPersonnel older = this
					.getOtherAttentionPersonnelByIdCardNo(idCardNo, id);
			domain.setId(older.getId());
			domain.setCreateDate(older.getCreateDate());
			domain.setCreateUser(older.getCreateUser());
			return updateOtherAttentionPersonnel(domain);
		} catch (Exception e) {
			logger.error("", e);
			if (!ExcelImportHelper.isImport.get()) {
				throw new BusinessValidationException("修改信息出现错误");
			} else {
				return null;
			}
		}
	}

	@Override
	public void deleteOtherAttentionPersonnelByIds(Long[] ids) {
		if (ids == null || ids.length == 0) {
			throw new BusinessValidationException("传入参数为空");
		}
		try {
			for (int i = 0; i < ids.length; i++) {
				deleteOtherAttentionPersonnelById(ids[i]);
			}
		} catch (Exception e) {
			throw new ServiceValidationException(
					"类OtherAttentionPersonnelServiceImpl的deleteOtherAttentionPersonnelByIds方法出现异常，原因：",
					"删除其他人员信息出现错误", e);
		}

	}

	@Override
	public OtherAttentionPersonnel getOtherAttentionPersonnelById(Long id) {
		return getSimpleOtherAttentionPersonnelById(id);
	}

	@Override
	public void deleteBusinessPopulationDuplicate(Long id) {
		deleteOtherAttentionPersonnelById(id);
	}

}
