package com.tianque.plugin.taskList.serviceImpl;

import java.io.File;
import java.util.List;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.tianque.core.systemLog.util.ModuleConstants;
import com.tianque.core.util.CalendarUtil;
import com.tianque.core.util.FileUtil;
import com.tianque.core.util.GridProperties;
import com.tianque.core.util.StoredFile;
import com.tianque.core.util.StringUtil;
import com.tianque.core.util.ThreadVariable;
import com.tianque.core.validate.ValidateResult;
import com.tianque.core.vo.PageInfo;
import com.tianque.domain.Organization;
import com.tianque.domain.PropertyDict;
import com.tianque.domain.property.OrganizationType;
import com.tianque.domain.property.PropertyTypes;
import com.tianque.exception.base.BusinessValidationException;
import com.tianque.exception.base.ServiceValidationException;
import com.tianque.plugin.taskList.constants.Constants;
import com.tianque.plugin.taskList.dao.MentalPatientTaskDao;
import com.tianque.plugin.taskList.domain.MentalPatientTask;
import com.tianque.plugin.taskList.domain.TaskListAttachFile;
import com.tianque.plugin.taskList.service.GridConfigTaskService;
import com.tianque.plugin.taskList.service.MentalPatientTaskService;
import com.tianque.plugin.taskList.service.TaskListAttachFileService;
import com.tianque.plugin.taskList.validate.MentalPatientTaskValidatorImpl;
import com.tianque.sysadmin.service.OrganizationDubboService;
import com.tianque.sysadmin.service.PropertyDictService;

@Transactional
@Service("mentalPatientTaskService")
public class MentalPatientTaskServiceImpl implements MentalPatientTaskService {

	@Autowired
	private MentalPatientTaskDao mentalPatientTaskDao;
	@Autowired
	private OrganizationDubboService organizationService;
	@Autowired
	private MentalPatientTaskValidatorImpl mentalPatientValidate;
	private MentalPatientTask mentalPatientTask;
	@Autowired
	private PropertyDictService propertyDictService;
	@Autowired
	private OrganizationDubboService organizatinService;
	@Autowired
	private TaskListAttachFileService taskListAttachFileService;
	@Autowired
	private GridConfigTaskService configTaskService;

	@Override
	public MentalPatientTask updateMentalPatientTask(MentalPatientTask mentalPatientTask) {
		if (mentalPatientTask == null) {
			throw new BusinessValidationException("精神病走访信息不全修改报错");
		}
		validateMentalPatient(mentalPatientTask);
		try {
			return mentalPatientTaskDao.updateMentalPatientTask(mentalPatientTask);
		} catch (Exception e) {
			throw new ServiceValidationException("精神病走访信息不全修改报错", e);
		}
	}

	@Override
	public MentalPatientTask addMentalPatientTask(MentalPatientTask mentalPatientTask) {
		if (mentalPatientTask == null) {
			throw new BusinessValidationException("新增失败！");
		}
		if (mentalPatientTask.getHasException() == null) {
			throw new BusinessValidationException("有无异常不能为空");
		}
		if (mentalPatientTask.getHasException() == 1
				&& StringUtils.isBlank(mentalPatientTask.getException())) {
			throw new BusinessValidationException("有异常时，异常情况不能为空");
		}
		validateMentalPatient(mentalPatientTask);
		try {
			fillOrganization(mentalPatientTask);
			fillMentalPatientTelAndUserId(mentalPatientTask);
			//把帮扶人员的id和-去掉,例：23-asdfasf,22-sdfsdf变成asdfasf,sdfsdf
			if(StringUtil.isStringAvaliable(mentalPatientTask.getHelpPeople())){
				fillDruggyHelpPeople(mentalPatientTask);
			}
			String[] attachFileNames = mentalPatientTask.getAttachFileNames();
			mentalPatientTask = mentalPatientTaskDao.addMentalPatientTask(mentalPatientTask);
			addAttachFile(attachFileNames, mentalPatientTask.getId());
			return mentalPatientTask;
		} catch (Exception e) {
			throw new ServiceValidationException(
					"类MentalPatientTaskServiceImpl的addMentalPatientTask方法出错，原因：", "新增信息时出错", e);
		}
	}
	//把帮扶人员的id和-去掉
	private void fillDruggyHelpPeople(MentalPatientTask mentalPatientTask){
		String helpPeople=mentalPatientTask.getHelpPeople();
		//手机新增是没有-的，那边是直接传拼好的，直接返回即可
		if(helpPeople.indexOf("-")<=0){
			return;
		}
		if(helpPeople.indexOf(",")<=0){
			mentalPatientTask.setHelpPeople(helpPeople.split("-")[1]);
			return;
		}
		String[] array=helpPeople.split(",");
		String str="";
		for(int i=0;i<array.length;i++){
			str=str+","+array[i].split("-")[1];
		}
		mentalPatientTask.setHelpPeople(str.substring(1));
	}
	@Override
	public void deleteMentalPatientTaskByIds(List<Long> ids) {
		if (ids == null || ids.size() < 1) {
			throw new BusinessValidationException("参数为空，获取严重精神障碍患者记录信息失败！");
		}
		try {
			mentalPatientTaskDao.deleteMentalPatientTaskByIds(ids);
			for (Long id : ids) {
				taskListAttachFileService.deleteTaskListAttachFilesByBusinessId(id,
						Constants.MENTALPATIENTTASK_KEY);
			}
		} catch (Exception e) {
			throw new ServiceValidationException(
					"类MentalPatientTaskServiceImpl的deleteMentalPatientTaskByIds方法出错，原因：", "删除时出错",
					e);
		}

	}

	@Override
	public PageInfo getMentalPatientTaskList(MentalPatientTask mentalPatientTask, Integer page,
			Integer rows, String sidx, String sord) {
		if (mentalPatientTask == null || page == null || rows == null
				|| mentalPatientTask.getOrganization() == null
				|| mentalPatientTask.getOrganization().getId() == null) {
			throw new BusinessValidationException("参数为空，获取严重精神障碍患者记录信息失败！");
		}
		try {
			fillOrganization(mentalPatientTask);
			mentalPatientTask = fillOrgInternalCode(mentalPatientTask);
			return mentalPatientTaskDao.getMentalPatientTaskList(mentalPatientTask, page, rows,
					sidx, sord);

		} catch (Exception e) {
			throw new ServiceValidationException(
					"类MentalPatientTaskServiceImpl的getMentalPatientTaskList方法出现异常，原因：",
					"获取严重精神障碍患者记录信息出现错误", e);
		}
	}

	private MentalPatientTask fillOrgInternalCode(MentalPatientTask mentalPatientTask) {
		PropertyDict orgTypeDict = propertyDictService
				.findPropertyDictByDomainNameAndDictDisplayName(PropertyTypes.ORGANIZATION_TYPE,
						OrganizationType.FUNCTION_KEY);
		Organization org = organizationService.getFullOrgById(mentalPatientTask.getOrganization()
				.getId());
		if (isGridConfigTaskSearch(mentalPatientTask)) {
			if (StringUtil.isStringAvaliable(mentalPatientTask.getMode())
					&& "true".equals(mentalPatientTask.getMode())) {
				mentalPatientTask.setFunOrgId(org.getId());
				mentalPatientTask.setMode("gridConfigTask");
			}
			mentalPatientTask.getOrganization().setOrgInternalCode(null);
		} else if (orgTypeDict.getId().equals(org.getOrgType().getId())) {
			mentalPatientTask.getOrganization().setOrgInternalCode(
					organizationService.getOrgInternalCodeById(org.getParentOrg().getId()));
		} else {
			mentalPatientTask.getOrganization().setOrgInternalCode(
					mentalPatientTask.getOrganization().getOrgInternalCode());
		}
		return mentalPatientTask;
	}

	//判断是否为网格配置后的查询
	private boolean isGridConfigTaskSearch(MentalPatientTask mentalPatientTask) {
		Long funId = mentalPatientTask.getOrganization().getId();
		if (mentalPatientTask.getMode() == null) {
			return false;
		}
		if (mentalPatientTask.getMode().equals("gridConfigTask")
				&& funId.equals(ThreadVariable.getOrganization().getId())) {
			return true;
		}
		if (mentalPatientTask.getMode().equals("true")
				&& configTaskService.isHasGridTaskList(funId,Constants.TASKLIST_KEY)) {
			return true;
		}
		return false;
	}

	@Override
	public MentalPatientTask getMentalPatientTaskById(Long id) {
		if (id == null) {
			throw new BusinessValidationException("获取信息不全出错！");
		}
		try {
			mentalPatientTask = mentalPatientTaskDao.getMentalPatientTaskById(id);
			fillOrganization(mentalPatientTask);
			List<TaskListAttachFile> mentalPatientAnnexFiles = taskListAttachFileService
					.queryTaskListAttachFilesByBusinessId(id, Constants.MENTALPATIENTTASK_KEY);
			mentalPatientTask.setAnnexFiles(mentalPatientAnnexFiles);
			return mentalPatientTask;
		} catch (Exception e) {
			throw new ServiceValidationException("根据id获取严重精神障碍患者走访信息出错", e);
		}
	}

	public void validateMentalPatient(MentalPatientTask mentalPatientTask) {
		ValidateResult result = mentalPatientValidate.validate(mentalPatientTask);
		if (result.hasError()) {
			throw new BusinessValidationException(result.getErrorMessages());
		}
	}

	public void fillOrganization(MentalPatientTask mentalPatientTask) {
		if (mentalPatientTask.getOrganization().getId() == null) {
			throw new BusinessValidationException("组织结构获取异常！");
		}
		Organization organization = organizatinService.getFullOrgById(mentalPatientTask
				.getOrganization().getId());
		String[] orgs = organization.getFullOrgName().split(ModuleConstants.SEPARATOR);
		if (orgs.length > 2) {
			String org = orgs[orgs.length - 2] + ModuleConstants.SEPARATOR + orgs[orgs.length - 1];
			organization.setFullOrgName(org);
		}
		mentalPatientTask.setOrganization(organization);
	}

	public void fillMentalPatientTelAndUserId(MentalPatientTask mentalPatientTask) {
		Long userId = ThreadVariable.getUser().getId();
		String tel = ThreadVariable.getUser().getMobile();
		mentalPatientTask.setReporterTel(tel);
		mentalPatientTask.setReporter(userId);
		mentalPatientTask.setTime(CalendarUtil.now());
	}

	@Override
	public PageInfo searchMentalPatient(MentalPatientTask mentalPatientTask, Integer page,
			Integer rows, String sidx, String sord) {
		if (mentalPatientTask == null || page == null || rows == null
				|| mentalPatientTask.getOrganization() == null
				|| mentalPatientTask.getOrganization().getId() == null) {
			throw new BusinessValidationException("参数为空，获取严重精神障碍患者记录信息失败！");
		}
		try {
			fillOrganization(mentalPatientTask);
			mentalPatientTask = fillOrgInternalCode(mentalPatientTask);
			return mentalPatientTaskDao.searchMentalPatient(mentalPatientTask, page, rows, sidx,
					sord);
		} catch (Exception e) {
			throw new ServiceValidationException(
					"类MentalPatientTaskServiceImpl的searchMentalPatient方法出现异常，原因：",
					"获取严重精神障碍患者记录信息出现错误", e);
		}
	}

	private void addAttachFile(String[] attachFileNames, Long objectId) {
		if (attachFileNames != null && attachFileNames.length > 0) {
			TaskListAttachFile taskListAttachFile = null;
			StoredFile storedFile = null;
			for (String attachFileName : attachFileNames) {
				if (attachFileName.charAt(0) == ',') {
					attachFileName = attachFileName.substring(1);
					try {
						storedFile = FileUtil.copyTmpFileToStoredFile(attachFileName,
								GridProperties.DOWNLOAD_TEMP_FILE_FOLDER);
					} catch (Exception e) {
						e.printStackTrace();
					}
					taskListAttachFile = new TaskListAttachFile();
					taskListAttachFile.setBusinessId(objectId);
					taskListAttachFile.setPhysicsFullFileName(storedFile.getStoredFilePath()
							+ File.separator + storedFile.getStoredFileName());
					taskListAttachFile.setFileName(storedFile.getStoredTruthFileName());
					taskListAttachFile.setModuleKey(Constants.MENTALPATIENTTASK_KEY);
					taskListAttachFileService.addTaskListAttachFile(taskListAttachFile);
				}
			}
		}
	}

	private void updateAttachFile(String[] attachFileNames, Long objectId) {
		if (attachFileNames != null && attachFileNames.length > 0) {
			taskListAttachFileService.deleteTaskListAttachFilesByBusinessId(objectId,
					Constants.MENTALPATIENTTASK_KEY);
			addAttachFile(attachFileNames, objectId);
		}
	}

}
