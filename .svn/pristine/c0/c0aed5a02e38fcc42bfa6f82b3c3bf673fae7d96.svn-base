package com.tianque.sysadmin.service.impl;


import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

import net.sf.json.JSONArray;

import org.apache.commons.lang.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.tianque.baseInfo.enamePermissionCache.domain.EnamePermissionCache;
import com.tianque.baseInfo.enamePermissionCache.service.EnamePermissionCacheService;
import com.tianque.baseInfo.primaryOrg.domain.GridTeam;
import com.tianque.baseInfo.primaryOrg.service.GridTeamService;
import com.tianque.core.cache.constant.MemCacheConstant;
import com.tianque.core.cache.service.CacheService;
import com.tianque.core.cache.util.CacheKeyGenerator;
import com.tianque.core.util.DateUtil;
import com.tianque.core.util.ThreadVariable;
import com.tianque.core.vo.PageInfo;
import com.tianque.domain.Organization;
import com.tianque.domain.Permission;
import com.tianque.domain.Role;
import com.tianque.domain.User;
import com.tianque.domain.vo.UserCountAboutVo;
import com.tianque.domain.vo.UserCountVo;
import com.tianque.domain.vo.UserVo;
import com.tianque.init.Node;
import com.tianque.mobile.vo.PermissionVo;
import com.tianque.sysadmin.service.OrganizationDubboService;
import com.tianque.sysadmin.service.PermissionService;
import com.tianque.sysadmin.util.PermissionTreeUtil;
import com.tianque.sysadmin.vo.PermissionTree;
import com.tianque.sysadmin.vo.RoleVo;
import com.tianque.userAuth.api.PermissionDubboService;

@Service("permissionService")
public class PermissionServiceImpl implements PermissionService {
	private static Logger logger = LoggerFactory
			.getLogger(PermissionServiceImpl.class);
	@Autowired
	private CacheService cacheService;
	@Autowired
	private PermissionDubboService permissionDubboService;

	@Autowired
	private GridTeamService gridTeamService;
	@Autowired
	private OrganizationDubboService organziationDubboService;
	
	private static final String KEY="ROLE_";
	private static final String HAS_PERMISSION_=KEY+"HAS_PERMISSION_";
	@Autowired
	private EnamePermissionCacheService enamePermissionCacheService;


	@Override
	public User addUser(User user) {
		List<Role> roles = user.getRoles();
		user = permissionDubboService.addUser(user);
		//维护用户和网格员关系(一对一关系).
		user.setRoles(roles);
		bindUserAndGridTeam(user);
		return user;
	}

	@Override
	public PageInfo<User> findUsersForPageByUserIdAndOrgIdAndLockState(
			Long userId, Long orgId, boolean findChild, Boolean locked,
			User user, String roleIds, int pageNum, int pageSize,
			String sortField, String order) {
		return permissionDubboService
				.findUsersForPageByUserIdAndOrgIdAndLockState(userId, orgId,
						findChild, locked, user, roleIds, pageNum, pageSize,
						sortField, order);
	}

	@Override
	public User updateUser(User user) {
		//维护用户和网格员关系(一对一关系).
		bindUserAndGridTeam(user);
		return permissionDubboService.updateUser(user);
	}

	@Override
	public User updateUserFromGridTeam(User user){
		return permissionDubboService.updateUserFromGridTeam(user);
	}
	
	@Override
	public User updateUserForMobile(User user) {
		return permissionDubboService.updateUserForMobile(user);
	}

	@Override
	public User updateUserByShutdown(User user) {
		return permissionDubboService.updateUserByShutdown(user);
	}

	@Override
	public void deleteRoleById(Long id) {
		permissionDubboService.deleteRoleById(id);
		String cachekey = HAS_PERMISSION_+id;
		enamePermissionCacheService.deleteEnamePermissionCache(cachekey);
	}

	@Override
	public List<PermissionVo> findUserAllPermissionEnameAndCnameByUserId(
			Long userId) {
		return permissionDubboService
				.findUserAllPermissionEnameAndCnameByUserId(userId);
	}

	@Override
	public Role findRoleById(Long id) {
		return permissionDubboService.findRoleById(id);
	}
	
	@Override
	public List<Role> findAllRoles(){
		return permissionDubboService.findAllRoles();
	}
	
	@Override
	public List<String> getRolePermissionEnameByRoleId(List<Long> addPermissionIds){
		return permissionDubboService.getRolePermissionEnameByRoleId(addPermissionIds);
	}

	@Override
	public PageInfo<Role> findAllRolesByUseInLevelForPage(int pageNum,
			int pageSize, Long id, String sortField, String order) {
		return permissionDubboService.findAllRolesByUseInLevelForPage(pageNum,
				pageSize, id, sortField, order);
	}

	@Override
	public Role addRole(Role role, String[] names) {
		return permissionDubboService.addRole(role, names);
	}
	
	@Override
	public Role updateRole(Role role, String[] enames) {
		return permissionDubboService.updateRole(role, enames);
	}

	@Override
	public Role findRoleByRoleNameAndUserInLevel(String roleName, Long levelId) {
		return permissionDubboService.findRoleByRoleNameAndUserInLevel(
				roleName, levelId);
	}

	@Override
	public List<Role> findRolesByUserId(Long userId) {
		return permissionDubboService.findRolesByUserId(userId);
	}

	@Override
	public List<Role> findRolesByUserIdAndUseInLevel(Long userId,
			Long useInLevel) {
		return permissionDubboService.findRolesByUserIdAndUseInLevel(userId,
				useInLevel);
	}

	@Override
	public List<Role> findRolesByRoleNameAndUserIdAndUseInLevel(
			String roleName, Long userId, Long useInLevel) {
		return permissionDubboService
				.findRolesByRoleNameAndUserIdAndUseInLevel(roleName, userId,
						useInLevel);
	}

	@Override
	public List<Role> findRolesByUserInLevel(Long useInLevel) {
		return permissionDubboService.findRolesByUserInLevel(useInLevel);
	}

	@Override
	public List<Role> findRolesByUserInLevel(String roleName, Long useInLevel) {
		return permissionDubboService.findRolesByUserInLevel(roleName,
				useInLevel);
	}

	@Override
	public List<Role> findDirectlyChildRolesByUseInLevel(Long useInLevel) {
		return permissionDubboService
				.findDirectlyChildRolesByUseInLevel(useInLevel);
	}

	@Override
	public List<Role> findAllChildRolesByUseInLevel(Long useInLevel) {
		return permissionDubboService.findAllChildRolesByUseInLevel(useInLevel);
	}

	@Override
	public List<Role> findAllRolesDownCurrentOrgLevel(Long useInLevel) {
		return permissionDubboService
				.findAllRolesDownCurrentOrgLevel(useInLevel);
	}

	@Override
	public List<Role> findRolesByUserInLevelNoAdmin(Long useInLevel) {
		return permissionDubboService.findRolesByUserInLevelNoAdmin(useInLevel);
	}

	@Override
	public List<Role> findDirectlyChildRolesByUseInLevelNoAdmin(Long useInLevel) {
		return permissionDubboService
				.findDirectlyChildRolesByUseInLevelNoAdmin(useInLevel);
	}

	@Override
	public List<Role> findAllChildRolesByUseInLevelNoAdmin(Long useInLevel) {
		return permissionDubboService
				.findAllChildRolesByUseInLevelNoAdmin(useInLevel);
	}

	@Override
	public PageInfo<Permission> findAllPermissionsForPage(int pageNum,
			int pageSize) {
		return permissionDubboService.findAllPermissionsForPage(pageNum,
				pageSize);
	}

	@Override
	public List<Permission> findAllPermissionsByRoleId(Long roleId)
			throws Exception {
		return permissionDubboService.findAllPermissionsByRoleId(roleId);
	}

	@Override
	public List<String> findUserAllPermissionEnameByUserId(Long userId) {
		List<String> permissions = (List<String>) cacheService.get(
				MemCacheConstant.PERMISSION_NAMESPACE,
				MemCacheConstant.getUserPermissionKey(
						MemCacheConstant.USERPERMISSION_KEY, userId,

						MemCacheConstant.USERPERMISSION_KEYPARAME_STRING));
		if (permissions == null) {
			permissions = permissionDubboService
					.findUserAllPermissionEnameByUserId(userId);
		}
		return permissions;
	}

	@Override
	public User getSimpleUserById(Long id) {
		User result = (User) cacheService.get(MemCacheConstant.USER_NAMESPACE,
				CacheKeyGenerator.generateCacheKeyFromId(User.class, id));
		if (result == null) {
			result = permissionDubboService.getSimpleUserById(id);
		}
		return result;
	}

	@Override
	public User getFullUserById(Long id) {
		return permissionDubboService.getFullUserById(id);
	}

	@Override
	public User getFullUserByUerName(String userName) {
		return permissionDubboService.getFullUserByUerName(userName);
	}

	@Override
	public String[][] findUserForAutocomplete(Long parentOrgId, String text,
			Boolean locked, boolean searchChildOrg, int size) {
		return permissionDubboService.findUserForAutocomplete(parentOrgId,
				text, locked, searchChildOrg, size);
	}

	@Override
	public void deleteUserMultiZoneByUserId(Long userId) {
		permissionDubboService.deleteUserMultiZoneByUserId(userId);
	}

	@Override
	public void deleteUserRoleRelasByUserId(Long userId) {
		permissionDubboService.deleteUserRoleRelasByUserId(userId);
	}

	@Override
	public void resetUserPasswordByUserId(Long userId, String password) {
		permissionDubboService.resetUserPasswordByUserId(userId, password);
	}

	@Override
	public String resetUserPasswordByUserName(String userName, String password) {
		return permissionDubboService.resetUserPasswordByUserName(userName,
				password);
	}

	@Override
	public Long addUserMultiZone(Long userId, Long orgId) {
		return permissionDubboService.addUserMultiZone(userId, orgId);
	}

	@Override
	public User findUserByUserName(String userName) {
		return permissionDubboService.findUserByUserName(userName);
	}

	@Override
	public List<User> findChildUsersByEnameAndOrgCode(String ename,
			String orgcode) {
		return permissionDubboService.findChildUsersByEnameAndOrgCode(ename,
				orgcode);
	}

	@Override
	public List<User> findChildUsersByEnameAndInternalCode(String ename,
			String internalCode) {
		return permissionDubboService.findChildUsersByEnameAndInternalCode(
				ename, internalCode);
	}

	@Override
	public Long addUserRoleRela(Long userId, Long roleId) {
		return permissionDubboService.addUserRoleRela(userId, roleId);
	}

	@Override
	public boolean updatePasswordSuccess(Long id, String oldPassword,
			String currentPassword, String validatePassword, String email) {
		return permissionDubboService.updatePasswordSuccess(id, oldPassword,
				currentPassword, validatePassword, email);
	}

	@Override
	public boolean isRoleUsed(Long id) {
		return permissionDubboService.isRoleUsed(id);
	}

	@Override
	public void lockOperate(Long id, boolean lock) {
		permissionDubboService.lockOperate(id, lock);
	}

	@Override
	public boolean isUserHasPermission(Long userId, String ename) {
		return permissionDubboService.isUserHasPermission(userId, ename);
	}

	@Override
	public void updateUserRoleRela(Long userId, Long[] roleIds) {
		permissionDubboService.updateUserRoleRela(userId, roleIds);
	}

	@Override
	public void updateUserMultiZone(Long userId, Long[] zoneIds) {
		permissionDubboService.updateUserMultiZone(userId, zoneIds);
	}

	@Override
	public int countUsersByOrgInternalCode(String orgInternalCode) {
		return permissionDubboService
				.countUsersByOrgInternalCode(orgInternalCode);
	}

	@Override
	public void updateFailureTimesById(Long userId, Integer failureTimes) {
		permissionDubboService.updateFailureTimesById(userId, failureTimes);
	}

	@Override
	public boolean updateUserDetails(User user) {
		return permissionDubboService.updateUserDetails(user);
	}

	@Override
	public List<User> findUsersByOrgId(Long id) {
		return permissionDubboService.findUsersByOrgId(id);
	}

	@Override
	public List<Permission> getRootPermissions() {
		return permissionDubboService.getRootPermissions();
	}

	@Override
	public List<Permission> getPermissionByParentId(Long parentId) {
		List permissions = (List) cacheService
				.get(MemCacheConstant.PERMISSION_NAMESPACE,
						MemCacheConstant
								.getMenuPermissionKey(
										MemCacheConstant.MENUPERMISSION_KEY,
										parentId,
										MemCacheConstant.MENUPERMISSION_KEYPERMISSIONIDTYPE_PARENTID,
										null));
		if (permissions == null) {
			permissions = permissionDubboService
					.getPermissionByParentId(parentId);
		}
		return permissions;
	}

	@Override
	public List<Permission> getPermissionByParentId(Long parentId, Long userId) {
		return permissionDubboService.getPermissionByParentId(parentId, userId);
	}

	@Override
	public PageInfo<Permission> getChildPermissions(Long parentId) {
		return permissionDubboService.getChildPermissions(parentId);
	}

	@Override
	public Permission updatePermissionName(Permission permission) {
		return permissionDubboService.updatePermissionName(permission);
	}

	@Override
	public void setIndexIdPermission(Long parentId) {
		permissionDubboService.setIndexIdPermission(parentId);
	}

	@Override
	public Permission getPermissionByPermissionId(Long id) {
		return permissionDubboService.getPermissionByPermissionId(id);
	}

	@Override
	public List<Permission> findPermissionsByPermissionName(String name,
			int pageNum, int pageSize) {
		return permissionDubboService.findPermissionsByPermissionName(name,
				pageNum, pageSize);
	}

	@Override
	public List<Long> searchParentPermissionIds(Long id) {
		return permissionDubboService.searchParentPermissionIds(id);
	}

	@Override
	public Permission findPermissionByEname(String ename) {
		Permission permission = (Permission) cacheService
				.get(MemCacheConstant.PERMISSION_NAMESPACE,
						MemCacheConstant
								.getMenuPermissionKey(
										MemCacheConstant.MENUPERMISSION_KEY,
										null,
										MemCacheConstant.MENUPERMISSION_KEYPERMISSIONIDTYPE_ENAME,
										ename));
		if (permission == null) {
			permission = permissionDubboService.findPermissionByEname(ename);
		}
		return permission;
	}

	@Override
	public boolean movePreviousOrNext(Permission p, String mode) {
		return permissionDubboService.movePreviousOrNext(p, mode);
	}

	@Override
	public boolean moveFirstOrLast(Permission p, String mode) {
		return permissionDubboService.moveFirstOrLast(p, mode);
	}

	@Override
	public List<Node> getAllNodes() {
		return permissionDubboService.getAllNodes();
	}

	@Override
	public List<Node> getCheckedPermssionTree() {
		return permissionDubboService.getCheckedPermssionTree();
	}

	@Override
	public List<Node> getMenuPermissionTree() {
		List<Node> nodes = (List<Node>) cacheService
				.get(MemCacheConstant.PERMISSION_NAMESPACE, MemCacheConstant
						.getUserPermissionKey(
								MemCacheConstant.USERPERMISSION_KEY,
								ThreadVariable.getUser().getId(),
								MemCacheConstant.USERPERMISSION_KEYPARAME_NOTE));
		if (null == nodes) {
			nodes = permissionDubboService.getMenuPermissionTree();
		}
		return nodes;
	}

	@Override
	public List<Node> getMenuPermissionTree(String nodeId, Integer n_lv) {
		List<Node> nodes = (List<Node>) cacheService.get(
				MemCacheConstant.PERMISSION_NAMESPACE, MemCacheConstant
						.getUserPermissionKey(
								MemCacheConstant.USERPERMISSION_KEY,
								ThreadVariable.getUser().getId(), nodeId));
		if (nodes == null) {
			nodes = permissionDubboService.getMenuPermissionTree(nodeId, n_lv);
		}
		return nodes;
	}

	@Override
	public List<Node> checkPermissionTree(List<Permission> permissions,
			List<Node> permissionNodes) {
		return permissionDubboService.checkPermissionTree(permissions,
				permissionNodes);
	}

	@Override
	public Permission addPermission(Permission permission) {
		return permissionDubboService.addPermission(permission);
	}

	@Override
	public PageInfo<User> findUsersBylockStatus(String status, User user,
			Integer page, Integer rows, String sidx, String sord) {
		return permissionDubboService.findUsersBylockStatus(status, user, page,
				rows, sidx, sord);
	}

	@Override
	public boolean oldPasswordIsRight(Long userId, String oldPassword) {
		return permissionDubboService.oldPasswordIsRight(userId, oldPassword);
	}

	@Override
	public boolean deleteUserById(Long[] ids) {
		//先删除网格员
		gridTeamService.deleteGridTeamByUserIds(ids);
		return permissionDubboService.deleteUserById(ids);
	}

	@Override
	public void initWorkBench(Long id, Boolean isFristWorkBench) {
		permissionDubboService.initWorkBench(id, isFristWorkBench);
	}

	@Override
	public Permission findPermissionByNormalUrl(String normalUrl) {
		return permissionDubboService.findPermissionByNormalUrl(normalUrl);
	}

	@Override
	public Long[] reSetPatelConfigByRoleId(Long roleId) {
		return permissionDubboService.reSetPatelConfigByRoleId(roleId);
	}

	@Override
	public void reSetPatelConfigByUserId(Long userId) {
		permissionDubboService.reSetPatelConfigByUserId(userId);
	}

	@Override
	public List<Long> findUserIdsByOrgIds(List<Long> orgIdList) {
		return permissionDubboService.findUserIdsByOrgIds(orgIdList);
	}

	@Override
	public List<Long> findUserIdsByRoleIds(List<Long> roleIdList) {
		return permissionDubboService.findUserIdsByRoleIds(roleIdList);
	}
	
	@Override
	public List<User> findUsersByRoleIds(List<Long> roleIdList) {
		return permissionDubboService.findUsersByRoleIds(roleIdList);
	}

	@Override
	public List<Long> findUserIdsByByOrgTypeAndOrgLevelAndOrgParentId(
			Integer orgTypeInternalId, Integer orgLevelInternalId,
			Long orgParentId) {
		return permissionDubboService
				.findUserIdsByByOrgTypeAndOrgLevelAndOrgParentId(
						orgTypeInternalId, orgLevelInternalId, orgParentId);
	}

	@Override
	public List<Long> findUserIdsByOrgIdAndRoleId(Long orgId, Long roleId) {
		return permissionDubboService
				.findUserIdsByOrgIdAndRoleId(orgId, roleId);
	}

	@Override
	public PageInfo<User> findUsersForPageInfoListByOrgInternalCodeAndRoleId(
			String orgInternalCodeById, Long roleId, Integer page,
			Integer rows, String sidx, String sord) {
		return permissionDubboService
				.findUsersForPageInfoListByOrgInternalCodeAndRoleId(
						orgInternalCodeById, roleId, page, rows, sidx, sord);
	}

	@Override
	public Integer countRolesByUserId(Long userId) {
		return permissionDubboService.countRolesByUserId(userId);
	}

	@Override
	public Integer countRolesByRoleNameAndUserInLevel(Long levelId) {
		return permissionDubboService
				.countRolesByRoleNameAndUserInLevel(levelId);
	}

	@Override
	public Integer countRolesByUserIdAndUseInLevel(Long userId, Long useInLevel) {
		return permissionDubboService.countRolesByUserIdAndUseInLevel(userId,
				useInLevel);
	}

	@Override
	public Role addRolePermissionRelasByRoleVos(Role role,
			List<RoleVo> roelVoList) {
		 role=permissionDubboService.addRolePermissionRelasByRoleVos(role,
				roelVoList);
		 List<String> addPermissionName = role.getPermissionName();
		 String cachekey = HAS_PERMISSION_+role.getId();
		 enamePermissionCacheService.addEnamePermissionCache(new EnamePermissionCache<RoleVo>(cachekey,addPermissionName));
		 
		return role;
	}

	@Override
	public Role updateRolePermissionRelasByRoleVos(Role role,
			List<RoleVo> roelVoList) {
		//网格员相关,岗位名为信息员
		Role oldRole = findRoleById(role.getId());
		if(isGridRole(oldRole) && !isGridRole(role)){
			//删除
			List idList=new ArrayList();
			idList.add(role.getId());
			List<Long> userIds = findUserIdsByRoleIds(idList);
			gridTeamService.deleteGridTeamByUserIds((Long[])userIds.toArray(new Long[]{}));
		}
		if(!isGridRole(oldRole) && isGridRole(role)){
			//新增
			List idList=new ArrayList();
			idList.add(role.getId());
			List<User> users = findUsersByRoleIds(idList);
			for (User user : users) {
				gridTeamService.addUserToGridTeam(user);
			}
		}
		role = permissionDubboService.updateRolePermissionRelasByRoleVos(role,
				roelVoList);
		
		List<String> addPermissionName = role.getPermissionName();
		String cachekey = HAS_PERMISSION_+role.getId();
		String updateUser = ThreadVariable.getSession().getUserName();
		Date updateDate = Calendar.getInstance().getTime();	
	    String cacheValue=JSONArray.fromObject(addPermissionName).toString();
		enamePermissionCacheService.updateEnamePermissionCache(cachekey,cacheValue,updateUser,updateDate);
		return role;
		
	}

	@Override
	public Role copyRole(Role role) {
		role = permissionDubboService.copyRole(role);
		List<String> addPermissionName = role.getPermissionName();
		String cachekey = HAS_PERMISSION_+role.getId();
		enamePermissionCacheService.addEnamePermissionCache(new EnamePermissionCache<RoleVo>(cachekey,addPermissionName));
		return role;
	}

	@Override
	public User addMobileUser(User user, Boolean isImport) {
		return permissionDubboService.addMobileUser(user, isImport);
	}

	@Override
	public User findUserByMobileUserName(String userName) {
		return permissionDubboService.findUserByMobileUserName(userName);
	}

	@Override
	public PageInfo<User> findMobileUsers(UserVo userVo, int pageNum,
			int pageSize, String sortField, String sord) {
		return permissionDubboService.findMobileUsers(userVo, pageNum,
				pageSize, sortField, sord);
	}

	@Override
	public User updateMobileUser(User user) {
		return permissionDubboService.updateMobileUser(user);
	}

	@Override
	public User updateMobileUserVersion(User user) {
		return permissionDubboService.updateMobileUserVersion(user);
	}

	@Override
	public void matchupOrganizationMobileUserByIds(Long[] ids,
			Organization organization) {
		permissionDubboService.matchupOrganizationMobileUserByIds(ids,
				organization);
	}

	@Override
	public Boolean validateMobileUserVpdn(String vpdnTemp, Long[] ids) {
		return permissionDubboService.validateMobileUserVpdn(vpdnTemp, ids);
	}

	@Override
	public void recycleMobileUser(Long[] ids) {
		permissionDubboService.recycleMobileUser(ids);
	}

	@Override
	public String[][] getExportPopertyArray() {
		return permissionDubboService.getExportPopertyArray();
	}

	@Override
	public int countMobileUsers(UserVo userVo, int pageNum, int pageSize,
			String sortField, String sord) {
		return permissionDubboService.countMobileUsers(userVo, pageNum,
				pageSize, sortField, sord);
	}

	@Override
	public User findUserByImsi(String imsi) {
		return permissionDubboService.findUserByImsi(imsi);
	}

	@Override
	public int countFourthAccountUserByOrg(Organization organization) {
		return permissionDubboService.countFourthAccountUserByOrg(organization);
	}

	@Override
	public boolean findUserAllPermissionByUserIdAndPermissionEname(Long userId,
			String ename) {
		return permissionDubboService
				.findUserAllPermissionByUserIdAndPermissionEname(userId, ename);
	}

	@Override
	public List<Node> getMenuLeaderPermissionTree(String nodeId, Integer n_lv) {
		return permissionDubboService.getMenuLeaderPermissionTree(nodeId, n_lv);
	}

	@Override
	public Boolean setPermissionSeq(Long id, Long seq) {
		return permissionDubboService.setPermissionSeq(id, seq);
	}

	@Override
	public boolean isCanSeq(Long id, Long seq) {
		return permissionDubboService.isCanSeq(id, seq);
	}

	@Override
	public void openOrCloseGpsByUserId(Long[] ids, String mode) {
		permissionDubboService.openOrCloseGpsByUserId(ids, mode);
	}

	@Override
	public void openOrCloseFourTeamsByUserId(Long[] ids, String mode) {
		permissionDubboService.openOrCloseFourTeamsByUserId(ids, mode);
	}

	@Override
	public List<Long> getRolePermissionByRoleId(Long roleId) {
		return permissionDubboService.getRolePermissionByRoleId(roleId);
	}

	@Override
	public List<String> findPermissionsEnameByUserId(Long id) {
		List<String> permissions = (List<String>) cacheService.get(
				MemCacheConstant.PERMISSION_NAMESPACE,
				MemCacheConstant.getUserPermissionKey(
						MemCacheConstant.USERPERMISSION_KEY, id,

						MemCacheConstant.USERPERMISSION_KEYPARAME_STRING));
		if (permissions == null) {
			permissions = permissionDubboService
					.findPermissionsEnameByUserId(id);
		}
		return permissions;
	}

	@Override
	public List<Permission> findAllPermissionsByCurrentUserRoleId(Long userId,
			Integer permissiontype) throws Exception {
		return permissionDubboService.findAllPermissionsByCurrentUserRoleId(
				userId, permissiontype);
	}

	@Override
	public boolean updateUserStateByUserIds(Long[] ids, Long state) {
		return permissionDubboService.updateUserStateByUserIds(ids, state);
	}

	@Override
	public PageInfo<UserCountVo> findUserCount(Long orgId, Long accountType,
			Integer page, Integer rows, String sidx, String sord) {
		return permissionDubboService.findUserCount(orgId, accountType, page,
				rows, sidx, sord);
	}

	@Override
	public String[][] getUserCountExportPopertyArray() {
		return permissionDubboService.getUserCountExportPopertyArray();
	}

	@Override
	public List<Permission> getAllChildPermissionsByParentId(Long permissionId) {
		return permissionDubboService
				.getAllChildPermissionsByParentId(permissionId);
	}

	@Override
	public Permission getSimplePermissionById(Long id) {
		return permissionDubboService.getSimplePermissionById(id);
	}

	@Override
	public List<Permission> getChildMenuByEname(String string) {
		Long parentId = null;
		if (!StringUtils.isEmpty(string)) {
			parentId = findPermissionByEname(string).getId();
		}
		List permissions = (List) cacheService
				.get(MemCacheConstant.PERMISSION_NAMESPACE,
						MemCacheConstant
								.getMenuPermissionKey(
										MemCacheConstant.MENUPERMISSION_KEY,
										parentId,
										MemCacheConstant.MENUPERMISSION_KEYPERMISSIONIDTYPE_PARENTID,
										null));
		if (permissions == null) {
			permissions = permissionDubboService.getChildMenuByEname(string);
		}
		return permissions;
	}

	@Override
	public List<Permission> getChildMenuByEnameAndExcludeButtons(String string) {
		Long parentId = null;
		if (!StringUtils.isEmpty(string)) {
			parentId = findPermissionByEname(string).getId();
		}
		List permissions = (List) cacheService
				.get(MemCacheConstant.PERMISSION_NAMESPACE,
						MemCacheConstant
								.getMenuPermissionKey(
										MemCacheConstant.MENUPERMISSION_KEY,
										parentId,
										MemCacheConstant.MENUPERMISSION_KEYPERMISSIONIDTYPE_PARENTID_TREE,
										null));
		if (null == permissions) {
			permissions = permissionDubboService
					.getChildMenuByEnameAndExcludeButtons(string);
		}
		return permissions;
	}

	@Override
	public int countAllLoginCount(Long orgId) {
		return permissionDubboService.countAllLoginCount(orgId);
	}

	@Override
	public boolean findUserAllPermissionByUserIdAndPermissionEnames(
			Long userId, String... enames) {
		return permissionDubboService
				.findUserAllPermissionByUserIdAndPermissionEnames(userId,
						enames);
	}

	@Override
	public List<PermissionTree> getUserPermissionTreeByPermissionId(
			Long permissionId) {
		Long start = System.currentTimeMillis();
		String key = "PERMISSIONTREEID_" + permissionId + "_KEY";
		// ------------memcache
		PermissionTree permissionTree = (PermissionTree) cacheService.get(
				MemCacheConstant.PERMISSION_NAMESPACE, key);
		if (permissionTree == null) {
			permissionTree = new PermissionTree();
			List<Permission> permissions = permissionDubboService
					.getAllChildPermissionsByParentId(permissionId);
			// ----------
			PermissionTreeUtil.convertPermissions(permissionTree, permissions);
			permissionTree = permissionTree.getChildren().get(0);
			cacheService.set(MemCacheConstant.PERMISSION_NAMESPACE, key,
					permissionTree);
			logger.error("菜单service查询耗时  db  :"
					+ (System.currentTimeMillis() - start));
		} else {
			logger.error("菜单service查询耗时    memcached  :"
					+ (System.currentTimeMillis() - start));
		}

		if (!ThreadVariable.getUser().isAdmin()) {
			List<String> permissionList = permissionDubboService
					.findPermissionsEnameByUserId(ThreadVariable.getUser()
							.getId());
			PermissionTreeUtil.checkUserHasPermissions(
					permissionTree.getChildren(), permissionList);
		}
		logger.error("菜单service耗时:" + (System.currentTimeMillis() - start));
		return permissionTree.getChildren();
	}

	@Override
	public PageInfo<UserCountAboutVo> findUsersAboutUserCount(Long orgId,
			Date loginBeginDate, Date loginEndDate, Date createBeginDate,
			Date createEndDate, int pageNum, int pageSize, String sortField,
			String order, Long pcOrMobile, Long isSelectLoginTime,
			Date beginActivationTime, Date endActivationTime,
			Long isSelectActivationTime) {
		return permissionDubboService.findUsersAboutUserCount(orgId,
				loginBeginDate, DateUtil.getEndTime(loginEndDate),
				createBeginDate, DateUtil.getEndTime(createEndDate), pageNum,
				pageSize, sortField, order, pcOrMobile, isSelectLoginTime,
				beginActivationTime, DateUtil.getEndTime(endActivationTime),
				isSelectActivationTime);
	}
	
	//新增/修改用户时绑定和维护和网格员之间的关系
	public void bindUserAndGridTeam(User user){
		GridTeam gridTeam = gridTeamService.getGridTeamByUserId(user.getId());
		boolean flag=false;//是否已有网格员与之关联
		if(gridTeam!=null){
			flag=true;
		}
		boolean flag2=false;//修改后用户是否还属于网格员角色
		if(user.getRoles()!=null&&user.getRoles().size()!=0){
			for (Role role : user.getRoles()) {
				if (isGridRole(role)) {
					flag2=true;
					gridTeamService.bindUserToGridTeam(user);
				}
			}
		}
		if(flag&&!flag2){
			//删除网格员信息
			gridTeamService.deleteGridTeamByIds(new String[]{gridTeam.getId()+""});
		}
	}
	
	public boolean isGridRole(Role role){
		return "信息员".equals(role.getRoleName()) || "农村信息员".equals(role.getRoleName());
	}
	
}
