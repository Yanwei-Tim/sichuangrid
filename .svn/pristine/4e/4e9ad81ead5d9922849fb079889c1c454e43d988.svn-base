package com.tianque.plugin.weChat.dao.impl;

import java.util.List;
import java.util.Map;

import org.apache.log4j.Logger;
import org.springframework.stereotype.Repository;

import com.tianque.core.base.AbstractBaseDao;
import com.tianque.core.vo.PageInfo;
import com.tianque.plugin.weChat.dao.InboxDao;
import com.tianque.plugin.weChat.domain.inbox.Inbox;

@Repository("inboxDao")
public class InboxDaoImpl extends AbstractBaseDao implements InboxDao {
	private static Logger logger = Logger.getLogger(InboxDaoImpl.class);

	@Override
	public PageInfo<Inbox> findInboxs(Map<String, Object> parameterMap, Integer pageNum,
			Integer pageSize) {
		return getPageInfoByParamMap(new PageInfo<Inbox>(), "inbox.countFindInboxs",
				"inbox.findInboxs", pageNum, pageSize, parameterMap);
	}


	@Override
	public Long saveInbox(Inbox inbox) {
		return (Long) getSqlMapClientTemplate().insert("inbox.saveInbox", inbox);
	}

	@Override
	public void deleteInboxById(List<Long> inboxId) {
		for (Long ids : inboxId) {
			getSqlMapClientTemplate().delete("inbox.deleteInboxById", ids);
		}
	}

	@Override
	public Inbox getInboxById(Long id) {
		return (Inbox) getSqlMapClientTemplate().queryForObject("inbox.getInboxById", id);
	}

	@Override
	public void update(Inbox inbox) {
		getSqlMapClientTemplate().update("inbox.updateById", inbox);
	}

	@Override
	public Long getMaxInboxId() {
		return (Long) getSqlMapClientTemplate().queryForObject("inbox.getMaxInboxId");
	}
}
