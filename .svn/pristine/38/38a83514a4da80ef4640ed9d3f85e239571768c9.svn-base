package com.tianque.userAccountLoginDetail.dao.impl;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import java.util.List;

import org.springframework.stereotype.Repository;

import com.tianque.core.util.ThreadVariable;
import com.tianque.core.vo.PageInfo;
import com.tianque.dao.AbstractBaseDao;
import com.tianque.domain.Organization;
import com.tianque.domain.UserSign;
import com.tianque.fourTeams.fourTeamsManage.domain.FourTeams;
import com.tianque.userAccountLoginDetail.dao.UserAccountLoginDetailDao;
import com.tianque.userAccountLoginDetail.domain.UserAccountLoginDetail;
import com.tianque.userAccountLoginDetail.vo.UserAccountLoginStatisticsVo;
import com.tianque.userAccountLoginDetail.vo.UserAccountSearchVo;

@Repository("userAccountLoginDetailDao")
public class UserAccountLoginDetailDaoImpl extends AbstractBaseDao implements UserAccountLoginDetailDao {

	@Override
	public void createUserAccountLoginDetailForWeek(Date startDate, Date endDate) {
		Map<String,Object> map = new HashMap<String,Object>();
		map.put("startDate", startDate);
		map.put("endDate", endDate);
		map.put("createDate", new Date());
		map.put("createUser", ThreadVariable.getSession().getUserName());
		getSqlMapClientTemplate().insert("userAccountLoginDetail.createUserAccountLoginDetailForWeek",map);
	}

	@Override
	public void createUserAccountLoginDetailForMonth(Date startDate,
			Date endDate) {
		Map<String,Object> map = new HashMap<String,Object>();
		map.put("startDate", startDate);
		map.put("endDate", endDate);
		map.put("createDate", new Date());
		map.put("createUser", ThreadVariable.getSession().getUserName());
		getSqlMapClientTemplate().insert("userAccountLoginDetail.createUserAccountLoginDetailForMonth",map);
	}
	
	@Override
	public List<UserSign> getUserSignByUserIdAndDate(Long userId,
			Date startDate, Date endDate) {
		Map<String,Object> map = new HashMap<String,Object>();
		map.put("startDate", startDate);
		map.put("endDate", endDate);
		map.put("userId", userId);
		return getSqlMapClientTemplate().queryForList("userAccountLoginDetail.getUserSignByUserIdAndDate",map);
	}

	@Override
	public void deleteUserAccountLoginDeatilWeek() {
		getSqlMapClientTemplate().delete("userAccountLoginDetail.deleteUserAccountLoginDeatilWeek");
	}

	@Override
	public PageInfo<UserAccountLoginDetail> findUserAccountLoginDetailForPageResult(
			Organization organization, Integer searchType, Integer page,
			Integer rows, String sidx, String sord) {
		Map<String,Object> map = new HashMap<String,Object>();
		map.put("orgId", organization.getId());
		map.put("orgCode", organization.getOrgInternalCode());
		map.put("sortField", sidx);
		map.put("order", sord);
		map.put("searchType",searchType);
		Integer countNum = (Integer) getSqlMapClientTemplate().queryForObject(
				"userAccountLoginDetail.countFindUserAccountLoginDetailForPageResult", map);
		List<UserAccountLoginDetail> list = getSqlMapClientTemplate().queryForList(
				"userAccountLoginDetail.findUserAccountLoginDetailForPageResult", map, (page - 1) * rows, rows);
		PageInfo<UserAccountLoginDetail> pageInfo = new PageInfo<UserAccountLoginDetail>(page, rows,
				countNum, list);
		return pageInfo;
	}

	@Override
	public void deleteUserAccountLoginDeatilMonth() {
		getSqlMapClientTemplate().delete("userAccountLoginDetail.deleteUserAccountLoginDeatilMonth");
	}

	@Override
	public PageInfo<UserAccountLoginDetail> searchUserAccountForPageResult(
			UserAccountSearchVo userAccountSearchVo, Integer page,
			Integer rows, String sidx, String sord) {
		Map<String,Object> map = new HashMap<String,Object>();
		map.put("orgId", userAccountSearchVo.getOrganization().getId());
		map.put("orgCode", userAccountSearchVo.getOrganization().getOrgInternalCode());
		map.put("sortField", sidx);
		map.put("order", sord);
		map.put("searchType",userAccountSearchVo.getSearchType());
		if(userAccountSearchVo.getOrgType()!=null){
			map.put("orgType",userAccountSearchVo.getOrgType().getId());
		}
		map.put("userAccountType",userAccountSearchVo.getUserAccountType());
		map.put("cityVillageType",userAccountSearchVo.getCityVillageType());
		map.put("startActivationTime",userAccountSearchVo.getStartActivationTime());
		map.put("endActivationTime",userAccountSearchVo.getEndActivationTime());
		map.put("startLastLoginTime",userAccountSearchVo.getStartLastLoginTime());
		map.put("endLastLoginTime",userAccountSearchVo.getEndLastLoginTime());
		Integer countNum = (Integer) getSqlMapClientTemplate().queryForObject(
				"userAccountLoginDetail.countSearchUserAccountForPageResult", map);
		List<UserAccountLoginDetail> list = getSqlMapClientTemplate().queryForList(
				"userAccountLoginDetail.searchUserAccountForPageResult", map, (page - 1) * rows, rows);
		PageInfo<UserAccountLoginDetail> pageInfo = new PageInfo<UserAccountLoginDetail>(page, rows,
				countNum, list);
		return pageInfo;
	}

	@Override
	public List<UserAccountLoginStatisticsVo> getAccountLoginDetailStatistics(Long orgId,Long orgType,Long funcType) {
		Map<String,Object> map = new HashMap<String,Object>();
		map.put("orgId", orgId);
		map.put("orgType", orgType);
		map.put("funcType", funcType);
		return  getSqlMapClientTemplate().queryForList(
				"userAccountLoginDetail.getAccountLoginDetailStatistics", map );
	}

}
