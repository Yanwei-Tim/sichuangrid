package com.tianque.plugin.taskList.serviceImpl;

import java.io.File;
import java.util.Date;
import java.util.List;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.tianque.core.util.FileUtil;
import com.tianque.core.util.GridProperties;
import com.tianque.core.util.StoredFile;
import com.tianque.core.util.ThreadVariable;
import com.tianque.core.validate.ValidateResult;
import com.tianque.domain.property.OrganizationType;
import com.tianque.domain.property.PropertyTypes;
import com.tianque.exception.base.BusinessValidationException;
import com.tianque.exception.base.ServiceValidationException;
import com.tianque.plugin.judgmentAnalysis.util.StringUtil;
import com.tianque.plugin.taskList.constants.Constants;
import com.tianque.plugin.taskList.dao.ReceiptDao;
import com.tianque.plugin.taskList.domain.BaseTaskVisit;
import com.tianque.plugin.taskList.domain.DruggyTask;
import com.tianque.plugin.taskList.domain.ExceptionalSituationRecord;
import com.tianque.plugin.taskList.domain.FloatingPopulationTask;
import com.tianque.plugin.taskList.domain.HiddenDanger;
import com.tianque.plugin.taskList.domain.HiddenDangerTask;
import com.tianque.plugin.taskList.domain.MentalPatientTask;
import com.tianque.plugin.taskList.domain.PositiveInfoRecord;
import com.tianque.plugin.taskList.domain.Receipt;
import com.tianque.plugin.taskList.domain.TaskListAttachFile;
import com.tianque.plugin.taskList.domain.TaskListReply;
import com.tianque.plugin.taskList.domain.TermerRecord;
import com.tianque.plugin.taskList.service.DruggyTaskService;
import com.tianque.plugin.taskList.service.ExceptionalSituationRecordService;
import com.tianque.plugin.taskList.service.HiddenDangerService;
import com.tianque.plugin.taskList.service.MentalPatientTaskService;
import com.tianque.plugin.taskList.service.PositiveInfoRecordService;
import com.tianque.plugin.taskList.service.TaskListAttachFileService;
import com.tianque.plugin.taskList.service.TaskListCommonService;
import com.tianque.plugin.taskList.service.TaskListReplyService;
import com.tianque.plugin.taskList.service.TermerRecordService;
import com.tianque.plugin.taskList.validate.ReceiptValidatorImpl;
import com.tianque.sysadmin.service.PropertyDictService;

@Transactional
@Service("taskListCommonService")
public class TaskListCommonServiceImpl implements TaskListCommonService {
	@Autowired
	private ReceiptDao receiptDao;
	@Autowired
	private ReceiptValidatorImpl receiptValidator;
	@Autowired
	private PropertyDictService propertyDictService;
	@Autowired
	private TaskListReplyService taskListReplyService;
	@Autowired
	private TaskListAttachFileService taskListAttachFileService;
	@Autowired
	private ExceptionalSituationRecordService exceptionalSituationRecordService;
	@Autowired
	private HiddenDangerService hiddenDangerService;
	@Autowired
	private DruggyTaskService druggyTaskService;
	@Autowired
	private TermerRecordService termerRecordService;
	@Autowired
	private MentalPatientTaskService mentalPatientTaskService;
	@Autowired
	private PositiveInfoRecordService positiveInfoRecordService;

	@Override
	public void updateReceiptStatus(Receipt receipt, String signType) {
		if (receipt == null || receipt.getId() == null
				|| StringUtil.isEmpty(receipt.getObjectType())) {
			throw new BusinessValidationException("签收基本参数为空，签收失败");
		}
		receiptValidator(receipt);
		try {
			fillReceipt(receipt);
			receiptDao.updateReceiptStatus(receipt, signType);
		} catch (Exception e) {
			throw new ServiceValidationException(
					"类TaskListCommonServiceImpl的updateReceiptStatus方法出现异常，原因：", "任务清单签收出现错误", e);
		}
	}

	private void receiptValidator(Receipt domain) {
		ValidateResult dataValidateResult = receiptValidator.validate(domain);
		if (dataValidateResult.hasError()) {
			throw new BusinessValidationException(dataValidateResult.getErrorMessages());
		}
	}

	private void fillReceipt(Receipt receipt) {
		if (StringUtil.isEmpty(Constants.getTableByKey(receipt.getObjectType()))) {
			throw new BusinessValidationException("参数有误，签收失败");
		}
		receipt.setTableName(Constants.getTableByKey(receipt.getObjectType()));
	}

	@Override
	public List<BaseTaskVisit> getAllKindTask(Long orgId) {
		try {
			Long orgType = propertyDictService.findPropertyDictByDomainNameAndDictDisplayName(
					PropertyTypes.ORGANIZATION_TYPE, OrganizationType.ADMINISTRATIVE_KEY).getId();
			//获取各个层级的走访，未走访，走访率
			List<BaseTaskVisit> baseTaskList = receiptDao.getTaskSumAndVisitByParentOrgId(orgType,
					orgId);
			for (int i = 0; i < baseTaskList.size(); i++) {

				if (baseTaskList.get(i).getId().equals(orgId)) {
					BaseTaskVisit temp = baseTaskList.get(i);
					temp.setOrgname("合计");
					baseTaskList.remove(i);
					baseTaskList.add(temp);

				}
			}
			return baseTaskList;
		} catch (Exception e) {
			throw new ServiceValidationException("获取走访报表出错", e);
		}

	}

	@Override
	public List<FloatingPopulationTask> getFloatingPopulationTaskList(Long orgId) {
		try {
			Long orgType = propertyDictService.findPropertyDictByDomainNameAndDictDisplayName(
					PropertyTypes.ORGANIZATION_TYPE, OrganizationType.ADMINISTRATIVE_KEY).getId();
			//获取各个层级的走访，未走访，走访率
			List<FloatingPopulationTask> floatingPopulationTask = receiptDao
					.getFloatingPopulationVisitByParentOrgId(orgType, orgId);
			for (int i = 0; i < floatingPopulationTask.size(); i++) {

				if (floatingPopulationTask.get(i).getId().equals(orgId)) {
					FloatingPopulationTask temp = floatingPopulationTask.get(i);
					temp.setOrgname("合计");
					floatingPopulationTask.remove(i);
					floatingPopulationTask.add(temp);

				}
			}
			return floatingPopulationTask;
		} catch (Exception e) {
			throw new ServiceValidationException("获取走访报表出错", e);
		}
	}

	@Override
	public List<HiddenDangerTask> getHiddenDangerVisitList(Long orgId) {
		try {
			Long orgType = propertyDictService.findPropertyDictByDomainNameAndDictDisplayName(
					PropertyTypes.ORGANIZATION_TYPE, OrganizationType.ADMINISTRATIVE_KEY).getId();
			//获取各个层级的走访，未走访，走访率
			List<HiddenDangerTask> hiddenDangerTask = receiptDao.getHiddenDangerVisitByParentOrgId(
					orgType, orgId);
			for (int i = 0; i < hiddenDangerTask.size(); i++) {

				if (hiddenDangerTask.get(i).getId().equals(orgId)) {
					HiddenDangerTask temp = hiddenDangerTask.get(i);
					temp.setOrgname("合计");
					hiddenDangerTask.remove(i);
					hiddenDangerTask.add(temp);

				}
			}
			return hiddenDangerTask;
		} catch (Exception e) {
			throw new ServiceValidationException("获取走访报表出错", e);
		}
	}

	@Override
	public List<BaseTaskVisit> getSpecialGroupSumAndVisitList(Long orgId) {
		try {
			Long orgType = propertyDictService.findPropertyDictByDomainNameAndDictDisplayName(
					PropertyTypes.ORGANIZATION_TYPE, OrganizationType.ADMINISTRATIVE_KEY).getId();
			//获取各个层级的走访，未走访，走访率
			List<BaseTaskVisit> baseTaskList = receiptDao.getSpecialGroupSumAndVisitList(orgType,
					orgId);
			for (int i = 0; i < baseTaskList.size(); i++) {

				if (baseTaskList.get(i).getId().equals(orgId)) {
					BaseTaskVisit temp = baseTaskList.get(i);
					temp.setOrgname("合计");
					baseTaskList.remove(i);
					baseTaskList.add(temp);
				}
			}
			return baseTaskList;
		} catch (Exception e) {
			throw new ServiceValidationException("获取任务清单特殊人群报表出错", e);
		}
	}

	@Override
	public TaskListReply addTaskListReply(TaskListReply taskListReply) {
		if (StringUtils.isBlank(taskListReply.getReplyContent())) {
			throw new BusinessValidationException("回复类容不能为空");
		}
		if (taskListReply.getReplyContent().length() > 1000) {
			throw new BusinessValidationException("回复类容长度不能超过1000");
		}
		if (StringUtils.isBlank(taskListReply.getModuleKey()) || taskListReply.getTaskId() == null) {
			throw new BusinessValidationException("参数缺失");
		}
		if (Constants.REPLY_EXCEPTIONALSITUATIONRECORD_KEY.equals(taskListReply.getModuleKey())) {
			ExceptionalSituationRecord exceptionalSituationRecord = exceptionalSituationRecordService
					.getExceptionalSituationRecordById(taskListReply.getTaskId());
			if (exceptionalSituationRecord.getStatus() != 1) {
				throw new BusinessValidationException("未签收的不能回复");
			}
			exceptionalSituationRecord.setHasReplay(1);
			exceptionalSituationRecordService
					.updateExceptionalSituationRecord(exceptionalSituationRecord);
		} else if (Constants.REPLY_HIDDENDANGER_KEY.equals(taskListReply
				.getModuleKey())) {
			HiddenDanger hiddenDanger = hiddenDangerService.getHiddenDangerById(taskListReply
					.getTaskId());
			if (hiddenDanger.getIshandle() != 1) {
				throw new BusinessValidationException("未签收的不能回复");
			}
			hiddenDanger.setHasReplay(1);
			hiddenDangerService.updateHiddenDanger(hiddenDanger);
		} else if (Constants.REPLY_DRUGGYTASK_KEY.equals(taskListReply.getModuleKey())) {
			DruggyTask druggyTask = druggyTaskService.getDruggyTaskById(taskListReply.getTaskId());
			if (druggyTask.getStatus() != 1) {
				throw new BusinessValidationException("未签收的不能回复");
			}
			druggyTask.setHasReplay(1);
			druggyTaskService.updateDruggyTask(druggyTask);
		} else if (Constants.REPLY_MENTALPATIENTTASK_KEY.equals(taskListReply.getModuleKey())) {
			MentalPatientTask task = mentalPatientTaskService
					.getMentalPatientTaskById(taskListReply.getTaskId());
			if (task.getStatusJustice() != 1 && task.getStatusPolice() != 1) {
				throw new BusinessValidationException("未签收的不能回复");
			}
			task.setHasReplay(1);
			mentalPatientTaskService.updateMentalPatientTask(task);
		} else if (Constants.REPLY_TERMERRECORD_KEY.equals(taskListReply.getModuleKey())) {
			TermerRecord termerRecord = termerRecordService.getTermerRecordById(taskListReply
					.getTaskId());
			if (termerRecord.getStatus() != 1) {
				throw new BusinessValidationException("未签收的不能回复");
			}
			termerRecord.setHasReplay(1);
			termerRecordService.updateTermerRecord(termerRecord);
		} else if (Constants.REPLY_POSITIVEINFORECORD_KEY.equals(taskListReply.getModuleKey())) {
			PositiveInfoRecord positiveInfoRecord = positiveInfoRecordService
					.getPositiveInfoRecordById(taskListReply.getTaskId());
			if (positiveInfoRecord.getStatus() != 1) {
				throw new BusinessValidationException("未签收的不能回复");
			}
			positiveInfoRecord.setHasReplay(1);
			positiveInfoRecordService.updatePositiveInfoRecord(positiveInfoRecord);
		} else {
			throw new BusinessValidationException("参数错误[moduleKey]");
		}
		taskListReply.setReplyDate(new Date());
		taskListReply.setReplyUser(ThreadVariable.getUser().getName());
		taskListReply.setReplyUserId(ThreadVariable.getUser().getId());
		TaskListReply saveTaskListReply = taskListReplyService.addTaskListReply(taskListReply);
		//附件保存
		if (taskListReply.getAttachFileNames() != null) {
			for (String s : taskListReply.getAttachFileNames()) {
				if (StringUtils.isNotBlank(s)) {
					try {
						addAttachFileForTemp(s.trim(), taskListReply.getModuleKey(),
								saveTaskListReply.getId());
					} catch (Exception e) {
						throw new ServiceValidationException("附件保存失败", e);
					}
				}
			}
		}

		return taskListReply;
	}

	@Override
	public List<TaskListReply> queryTaskListReplyByTaskId(String moduleKey, Long taskId) {
		if (StringUtils.isBlank(moduleKey)) {
			throw new BusinessValidationException("参数缺失[moduleKey]");
		}
		if (taskId == null) {
			throw new BusinessValidationException("参数缺失[taskId]");
		}
		return taskListReplyService.queryTaskListReplyByTaskId(moduleKey, taskId);
	}

	private void addAttachFileForTemp(String attachFileName, String moduleKey, Long taskId)
			throws Exception {
		TaskListAttachFile taskListAttachFile = new TaskListAttachFile();
		taskListAttachFile.setBusinessId(taskId);
		StoredFile storeFile = FileUtil.copyTmpFileToStoredFile(attachFileName,
				GridProperties.TASKLIST_PATH);
		taskListAttachFile.setPhysicsFullFileName(storeFile.getStoredFilePath()
				+ File.separator + storeFile.getStoredFileName());
		taskListAttachFile.setFileName(attachFileName);
		taskListAttachFile.setModuleKey(moduleKey);
		taskListAttachFileService.addTaskListAttachFile(taskListAttachFile);
	}
}
