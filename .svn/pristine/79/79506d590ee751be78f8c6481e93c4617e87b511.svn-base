package com.tianque.plugin.taskList.serviceImpl;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.tianque.core.validate.ValidateResult;
import com.tianque.domain.property.OrganizationType;
import com.tianque.domain.property.PropertyTypes;
import com.tianque.exception.base.BusinessValidationException;
import com.tianque.exception.base.ServiceValidationException;
import com.tianque.plugin.judgmentAnalysis.util.StringUtil;
import com.tianque.plugin.taskList.constants.Constants;
import com.tianque.plugin.taskList.dao.ReceiptDao;
import com.tianque.plugin.taskList.domain.BaseTaskVisit;
import com.tianque.plugin.taskList.domain.FloatingPopulationTask;
import com.tianque.plugin.taskList.domain.HiddenDangerTask;
import com.tianque.plugin.taskList.domain.Receipt;
import com.tianque.plugin.taskList.service.TaskListCommonService;
import com.tianque.plugin.taskList.validate.ReceiptValidatorImpl;
import com.tianque.sysadmin.service.PropertyDictService;

@Transactional
@Service("taskListCommonService")
public class TaskListCommonServiceImpl implements TaskListCommonService {
	@Autowired
	private ReceiptDao receiptDao;
	@Autowired
	private ReceiptValidatorImpl receiptValidator;
	@Autowired
	private PropertyDictService propertyDictService;

	@Override
	public void updateReceiptStatus(Receipt receipt, String signType) {
		if (receipt == null || receipt.getId() == null
				|| StringUtil.isEmpty(receipt.getObjectType())) {
			throw new BusinessValidationException("签收基本参数为空，签收失败");
		}
		receiptValidator(receipt);
		try {
			fillReceipt(receipt);
			receiptDao.updateReceiptStatus(receipt, signType);
		} catch (Exception e) {
			throw new ServiceValidationException(
					"类TaskListCommonServiceImpl的updateReceiptStatus方法出现异常，原因：", "任务清单签收出现错误", e);
		}
	}

	private void receiptValidator(Receipt domain) {
		ValidateResult dataValidateResult = receiptValidator.validate(domain);
		if (dataValidateResult.hasError()) {
			throw new BusinessValidationException(dataValidateResult.getErrorMessages());
		}
	}

	private void fillReceipt(Receipt receipt) {
		if (StringUtil.isEmpty(Constants.getTableByKey(receipt.getObjectType()))) {
			throw new BusinessValidationException("参数有误，签收失败");
		}
		receipt.setTableName(Constants.getTableByKey(receipt.getObjectType()));
	}

	@Override
	public List<BaseTaskVisit> getAllKindTask(Long orgId) {
		try {
			Long orgType = propertyDictService.findPropertyDictByDomainNameAndDictDisplayName(
					PropertyTypes.ORGANIZATION_TYPE, OrganizationType.ADMINISTRATIVE_KEY).getId();
			//获取各个层级的走访，未走访，走访率
			List<BaseTaskVisit> baseTaskList = receiptDao.getTaskSumAndVisitByParentOrgId(orgType,
					orgId);
			for (int i = 0; i < baseTaskList.size(); i++) {

				if (baseTaskList.get(i).getId().equals(orgId)) {
					BaseTaskVisit temp = baseTaskList.get(i);
					temp.setOrgname("合计");
					baseTaskList.remove(i);
					baseTaskList.add(temp);

				}
			}
			return baseTaskList;
		} catch (Exception e) {
			throw new ServiceValidationException("获取走访报表出错", e);
		}

	}

	@Override
	public List<FloatingPopulationTask> getFloatingPopulationTaskList(Long orgId) {
		try {
			Long orgType = propertyDictService.findPropertyDictByDomainNameAndDictDisplayName(
					PropertyTypes.ORGANIZATION_TYPE, OrganizationType.ADMINISTRATIVE_KEY).getId();
			//获取各个层级的走访，未走访，走访率
			List<FloatingPopulationTask> floatingPopulationTask = receiptDao
					.getFloatingPopulationVisitByParentOrgId(orgType, orgId);
			for (int i = 0; i < floatingPopulationTask.size(); i++) {

				if (floatingPopulationTask.get(i).getId().equals(orgId)) {
					FloatingPopulationTask temp = floatingPopulationTask.get(i);
					temp.setOrgname("合计");
					floatingPopulationTask.remove(i);
					floatingPopulationTask.add(temp);

				}
			}
			return floatingPopulationTask;
		} catch (Exception e) {
			throw new ServiceValidationException("获取走访报表出错", e);
		}
	}

	@Override
	public List<HiddenDangerTask> getHiddenDangerVisitList(Long orgId) {
		try {
			Long orgType = propertyDictService.findPropertyDictByDomainNameAndDictDisplayName(
					PropertyTypes.ORGANIZATION_TYPE, OrganizationType.ADMINISTRATIVE_KEY).getId();
			//获取各个层级的走访，未走访，走访率
			List<HiddenDangerTask> hiddenDangerTask = receiptDao.getHiddenDangerVisitByParentOrgId(
					orgType, orgId);
			for (int i = 0; i < hiddenDangerTask.size(); i++) {

				if (hiddenDangerTask.get(i).getId().equals(orgId)) {
					HiddenDangerTask temp = hiddenDangerTask.get(i);
					temp.setOrgname("合计");
					hiddenDangerTask.remove(i);
					hiddenDangerTask.add(temp);

				}
			}
			return hiddenDangerTask;
		} catch (Exception e) {
			throw new ServiceValidationException("获取走访报表出错", e);
		}
	}

	@Override
	public List<BaseTaskVisit> getSpecialGroupSumAndVisitList(Long orgId) {
		try {
			Long orgType = propertyDictService.findPropertyDictByDomainNameAndDictDisplayName(
					PropertyTypes.ORGANIZATION_TYPE, OrganizationType.ADMINISTRATIVE_KEY).getId();
			//获取各个层级的走访，未走访，走访率
			List<BaseTaskVisit> baseTaskList = receiptDao.getSpecialGroupSumAndVisitList(orgType,
					orgId);
			for (int i = 0; i < baseTaskList.size(); i++) {

				if (baseTaskList.get(i).getId().equals(orgId)) {
					BaseTaskVisit temp = baseTaskList.get(i);
					temp.setOrgname("合计");
					baseTaskList.remove(i);
					baseTaskList.add(temp);
				}
			}
			return baseTaskList;
		} catch (Exception e) {
			throw new ServiceValidationException("获取任务清单特殊人群报表出错", e);
		}
	}
}
