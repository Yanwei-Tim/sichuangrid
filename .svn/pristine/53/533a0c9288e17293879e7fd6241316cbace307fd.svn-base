package com.tianque.userAccountLoginDetail.service.impl;

import java.util.Date;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.tianque.core.util.CalendarUtil;
import com.tianque.core.vo.PageInfo;
import com.tianque.domain.Organization;
import com.tianque.domain.UserSign;
import com.tianque.exception.base.BusinessValidationException;
import com.tianque.exception.base.ServiceValidationException;
import com.tianque.sysadmin.service.OrganizationDubboService;
import com.tianque.userAccountLoginDetail.constrants.UserAccountLoginDeatilConstrants;
import com.tianque.userAccountLoginDetail.dao.UserAccountLoginDetailDao;
import com.tianque.userAccountLoginDetail.domain.UserAccountLoginDetail;
import com.tianque.userAccountLoginDetail.service.UserAccountLoginDetailService;
@Service("userAccountLoginDetailService")
@Transactional
public class UserAccountLoginDetailServiceImpl implements
		UserAccountLoginDetailService {

	@Autowired
	private UserAccountLoginDetailDao userAccountLoginDetailDao;
	@Autowired
	private OrganizationDubboService organizationDubboService;
	
	@Override
	public void createUserAccountLoginDetailForWeek(int year,int month) {
		//先清空周数据
		userAccountLoginDetailDao.deleteUserAccountLoginDeatilWeek();
		//根据当前时间获得上周时间段
		Date startDate = CalendarUtil.getBeforWeekMonday(CalendarUtil.getDateByYearAndMonth(year, month));
		Date endDate = CalendarUtil.getBeforWeekSunday(CalendarUtil.getDateByYearAndMonth(year, month));
		//生成上周数据
		userAccountLoginDetailDao.createUserAccountLoginDetailForWeek(startDate, endDate);
	}

	@Override
	public void createUserAccountLoginDetailForMonth(int year,int month) {
		//清空月表数据
		userAccountLoginDetailDao.deleteUserAccountLoginDeatilMonth();
		//根据当前时间获取上月时间段
		Date startDate = CalendarUtil.getLastMonthStart(year, month);//上月开始
		Date endDate = CalendarUtil.getMonthStart(year, month);//本月开始
		//生成上月数据
		userAccountLoginDetailDao.createUserAccountLoginDetailForMonth(startDate, endDate);
	}

	@Override
	public PageInfo<UserAccountLoginDetail> findUserAccountLoginDetailForPageResult(
			Organization organization, Integer searchType, Integer page,
			Integer rows, String sidx, String sord) {
		 if(organization==null || organization.getId()==null || searchType==null){
			 throw new BusinessValidationException("查询失败，未获得查询条件");
		 }
		organization =  organizationDubboService.getSimpleOrgById(organization.getId());
		return userAccountLoginDetailDao.findUserAccountLoginDetailForPageResult(organization, searchType, page, rows, sidx, sord);
	}

	@Override
	public List<UserSign> getUserSignByUserIdAndDate(Long userId,Integer searchType) {
		if(userId==null || searchType==null){
			throw new BusinessValidationException("查询失败，未获得查询条件");
		}
		Date startDate = null;
		Date endDate = null;
		if(UserAccountLoginDeatilConstrants.SEARCH_WEEK.equals(searchType)){
			//查询上周数据详情 根据当前时间查询上周时间段
			startDate=CalendarUtil.getBeforWeekMonday(CalendarUtil.now());
			endDate = CalendarUtil.getBeforWeekSunday(CalendarUtil.now());
		}else{
			//查询上月数据详情 根据当前时间获取上月时间段
			startDate=CalendarUtil.getLastMonthStart(CalendarUtil.getNowYear(),CalendarUtil.getNowMonth());
			endDate = CalendarUtil.getMonthStart(CalendarUtil.getNowYear(),CalendarUtil.getNowMonth());
		}
		return userAccountLoginDetailDao.getUserSignByUserIdAndDate(userId, startDate, endDate);
	}

	@Override
	public void createUserAccountLoginDetail() {
		int year = CalendarUtil.getYear(CalendarUtil.now());
		int month = CalendarUtil.getMonth(CalendarUtil.now());
		try{
			createUserAccountLoginDetailForWeek(year, month);
			createUserAccountLoginDetailForMonth(year, month);
		}catch(Exception e){
			throw new ServiceValidationException("生成报表失败",e);
		}
	}

}
