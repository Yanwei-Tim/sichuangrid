package com.tianque.plugin.weChat.controller;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.util.Map;

import javax.servlet.http.HttpServletResponse;

import org.apache.struts2.ServletActionContext;
import org.apache.struts2.convention.annotation.Action;
import org.apache.struts2.convention.annotation.Namespace;
import org.apache.struts2.convention.annotation.Result;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Controller;

import com.tianque.core.base.BaseAction;
import com.tianque.plugin.weChat.service.WeChatService;
import com.tianque.plugin.weChat.util.Constants;
import com.tianque.plugin.weChat.util.MessageUtil;
import com.tianque.plugin.weChat.util.SignUtil;

/** 接收来自代理的消息控制类 */
@Namespace("/weChat")
@Scope("prototype")
@Controller("weChatController")
public class WeChatController extends BaseAction {
	private static Logger logger = LoggerFactory.getLogger(WeChatController.class);
	@Autowired
	private WeChatService weChatService;
	/** 来自微信的xm格式信息（包括文本信息、图片音频信息、用户关注事件推送等等） */
	private String xmlStr;
	/** 标记来自微信的是什么方法 */
	private String method;
	/** 微信加密签名 */
	private String signature;
	/** 时间戳 */
	private String timestamp;
	/** 随机数 */
	private String nonce;
	/** 随机字符串 */
	private String echostr;

	// 接受微信发送的消息 - 代理请求WEB端
	@Action(value = "messageFromWeChat", results = {
			@Result(name = "success", type = "json", params = { "root", "true" }),
			@Result(name = "error", type = "json", params = { "root", "errorMessage" }) })
	public String messageFromWeChat() throws Exception {
		PrintWriter out = null;
		try {
			HttpServletResponse response = ServletActionContext.getResponse();
			response.setCharacterEncoding("UTF-8");
			if (method == null && xmlStr == null) {
				errorMessage = "ERROR:请求参数异常";
				logger.error("ERROR:请求参数异常");
				return ERROR;
			}
			logger.error("接受" + xmlStr);
			if (Constants.GET.equals(method)) {
				out = response.getWriter();
				/** 通过检验signature对请求进行校验，若校验成功则原样返回echostr，表示接入成功，否则接入失败 */
				if (SignUtil.checkSignature(signature, timestamp, nonce)) {
					out.print(echostr);
				}
			} else {
				Map<String, String> messageMap;
				InputStream iStream = new ByteArrayInputStream(xmlStr.getBytes());
				messageMap = MessageUtil.parseXml(iStream);
				/** 接收消息（存入数据库） */
				String respMessage = weChatService.receiveMessage(messageMap);
				if (respMessage != null) {
					out = response.getWriter();
					out.print(respMessage);
				}
			}
			return SUCCESS;
		} catch (IOException e) {
			logger.error("ERROR:" + e);
			return ERROR;
		} catch (Exception e) {
			logger.error("ERROR:" + e);
			return ERROR;
		} finally {
			if (out != null) {
				out.close();
				out = null;
			}
		}
	}

	public String getXmlStr() {
		return xmlStr;
	}

	public void setXmlStr(String xmlStr) {
		this.xmlStr = xmlStr;
	}

	public String getMethod() {
		return method;
	}

	public void setMethod(String method) {
		this.method = method;
	}

	public String getSignature() {
		return signature;
	}

	public void setSignature(String signature) {
		this.signature = signature;
	}

	public String getTimestamp() {
		return timestamp;
	}

	public void setTimestamp(String timestamp) {
		this.timestamp = timestamp;
	}

	public String getNonce() {
		return nonce;
	}

	public void setNonce(String nonce) {
		this.nonce = nonce;
	}

	public String getEchostr() {
		return echostr;
	}

	public void setEchostr(String echostr) {
		this.echostr = echostr;
	}

}
