package com.tianque.mobile.task.impl;

import java.util.List;

import org.apache.struts2.convention.annotation.Action;
import org.apache.struts2.convention.annotation.Namespace;
import org.apache.struts2.convention.annotation.Result;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Controller;

import com.tianque.core.util.ThreadVariable;
import com.tianque.domain.Organization;
import com.tianque.domain.PropertyDict;
import com.tianque.domain.User;
import com.tianque.domain.property.OrganizationLevel;
import com.tianque.domain.property.OrganizationType;
import com.tianque.domain.property.PropertyTypes;
import com.tianque.mobile.base.BaseMobileAction;
import com.tianque.mobile.task.PositiveInfoRecordMobileAdapter;
import com.tianque.plugin.taskList.controller.PositiveInfoRecordController;
import com.tianque.plugin.taskList.domain.PositiveInfoRecord;
import com.tianque.plugin.taskList.domain.PositiveInfoRecordVo;
import com.tianque.sysadmin.service.OrganizationDubboService;
import com.tianque.sysadmin.service.PropertyDictService;

@Controller("positiveInfoRecordAdapter")
@Namespace("/mobile/positiveInfoRecordManage")
@Scope("request")
public class PositiveInfoRecordMobileAdapterImpl extends BaseMobileAction implements
		PositiveInfoRecordMobileAdapter {

	@Autowired
	private PositiveInfoRecordController positiveInfoRecordController;
	@Autowired
	private OrganizationDubboService organizationDubboService;
	@Autowired
	private PropertyDictService propertyDictService;

	/** 社区服刑人员记录domain **/
	private PositiveInfoRecord positiveInfoRecord;
	/** 社区服刑人员记录查询domain **/
	private PositiveInfoRecordVo positiveInfoRecordVo;
	/** id字符串  **/
	private String ids;
	/** 组织id **/
	private Long orgId;
	/** 社区服刑人员记录集合 **/
	private List<PositiveInfoRecord> positiveInfoRecords;
	/** 附件名 **/
	/* 一个参数  */
	private String[] attachFiles;
	/* 多个参数  */
	private String[] attachFile;
	
	private Long id;

	@Override
	@Action(value = "addPositiveInfoRecordForMobile", results = {
			@Result(name = "success", type = "json", params = { "root", "true", "ignoreHierarchy",
					"false" }),
			@Result(name = "error", type = "json", params = { "root", "errorMessage" }) })
	public String addPositiveInfoRecord() throws Exception {
		fillAttachFileNames(positiveInfoRecord);
		positiveInfoRecordController.setPositiveInfoRecord(positiveInfoRecord);
		positiveInfoRecordController.addPositiveInfoRecord();
		return SUCCESS;
	}

	@Override
	@Action(value = "updatePositiveInfoRecordForMobile", results = {
			@Result(name = "success", type = "json", params = { "root", "true", "ignoreHierarchy",
					"false" }),
			@Result(name = "error", type = "json", params = { "root", "errorMessage" }) })
	public String updatePositiveInfoRecord() throws Exception {
		fillAttachFileNames(positiveInfoRecord);
		positiveInfoRecordController.setPositiveInfoRecord(positiveInfoRecord);
		positiveInfoRecordController.updatePositiveInfoRecord();
		return SUCCESS;
	}

	@Override
	@Action(value = "deletePositiveInfoRecordsForMobile", results = {
			@Result(type = "json", name = "success", params = { "root", "true", "ignoreHierarchy",
					"false" }),
			@Result(type = "json", name = "error", params = { "root", "errorMessage" }) })
	public String deletePositiveInfoRecords() throws Exception {
		positiveInfoRecordController.setIds(ids);
		positiveInfoRecordController.deletePositiveInfoRecords();
		return SUCCESS;
	}

	@Override
	@Action(value = "findPositiveInfoRecordsForMobile", results = {
			@Result(type = "json", name = "success", params = { "root", "gridPage",
					"ignoreHierarchy", "false" }),
			@Result(name = "error", type = "json", params = { "root", "errorMessage" }) })
	public String findPositiveInfoRecords() throws Exception {
//		fillPositiveInfoRecordVo(positiveInfoRecordVo);
		if(getTqmobile()!=null){
			positiveInfoRecordVo.setMode(getTqmobile());
		}
		positiveInfoRecordController.setPositiveInfoRecordVo(positiveInfoRecordVo);
		positiveInfoRecordController.setPage(page);
		positiveInfoRecordController.setRows(rows);
		positiveInfoRecordController.setSidx(sidx);
		positiveInfoRecordController.setSord(sord);
		positiveInfoRecordController.setOrgId(orgId);
		positiveInfoRecordController.findPositiveInfoRecords();
		gridPage = positiveInfoRecordController.getGridPage();
		return SUCCESS;
	}
	@Override
	@Action(value = "findInterViewPositiveInfoForMobile", results = {
			@Result(type = "json", name = "success", params = { "root", "gridPage",
					"ignoreHierarchy", "false" }),
			@Result(name = "error", type = "json", params = { "root", "errorMessage" }) })
	public String findInterViewPositiveInfoForMobile() throws Exception {
//		fillPositiveInfoRecordVo(positiveInfoRecordVo);
		if(getTqmobile()!=null){
			positiveInfoRecordVo.setMode(getTqmobile());
		}
		positiveInfoRecordController.setPositiveInfoRecordVo(positiveInfoRecordVo);
		positiveInfoRecordController.setPage(page);
		positiveInfoRecordController.setRows(rows);
		positiveInfoRecordController.setSidx(sidx);
		positiveInfoRecordController.setSord(sord);
		positiveInfoRecordController.setOrgId(orgId);
		positiveInfoRecordController.findInterViewPositiveInfos();
		gridPage = positiveInfoRecordController.getGridPage();
		return SUCCESS;
	}

	@Override
	@Action(value = "findPositiveInfoRecordsByNameForMobile", results = {
			@Result(type = "json", name = "success", params = { "root", "positiveInfoRecords",
					"ignoreHierarchy", "false" }),
			@Result(name = "error", type = "json", params = { "root", "errorMessage" }) })
	public String findPositiveInfoRecordsByName() throws Exception {
		fillPositiveInfoRecordVo(positiveInfoRecordVo);
		positiveInfoRecordController.setPositiveInfoRecordVo(positiveInfoRecordVo);
		positiveInfoRecordController.findPositiveInfoRecordsByNameForMobile();
		positiveInfoRecords = positiveInfoRecordController.getPositiveInfoRecords();
		return SUCCESS;
	}

	@Override
	@Action(value = "viewPositiveInfoRecordForMobile", results = {
			@Result(type = "json", name = "success", params = { "root", "positiveInfoRecord",
					"ignoreHierarchy", "false" }),
			@Result(name = "error", type = "json", params = { "root", "errorMessage" }) })
	public String viewPositiveInfoRecord() throws Exception {
		positiveInfoRecordController.setId(positiveInfoRecordVo.getId());
		positiveInfoRecordController.viewPositiveInfoRecord();
		positiveInfoRecord = positiveInfoRecordController.getPositiveInfoRecord();
		return SUCCESS;
	}
	
	@Override
	@Action(value = "viewInterViewPositiveInfoForMobile", results = {
			@Result(type = "json", name = "success", params = { "root", "positiveInfoRecord",
					"ignoreHierarchy", "false" }),
			@Result(name = "error", type = "json", params = { "root", "errorMessage" }) })
	public String viewInterViewPositiveInfo() throws Exception {
		positiveInfoRecordController.setId(id);
		positiveInfoRecordController.viewInterViewPositiveInfo();
		positiveInfoRecord = positiveInfoRecordController.getPositiveInfoRecord();
		return SUCCESS;
	}

	private void fillPositiveInfoRecordVo(PositiveInfoRecordVo positiveInfoRecordVo) {
		/** 获取组织机构 网格类型--职能部门 属性字典信息 **/
		PropertyDict orgTypeDict = propertyDictService
				.findPropertyDictByDomainNameAndDictDisplayName(PropertyTypes.ORGANIZATION_TYPE,
						OrganizationType.FUNCTION_KEY);
		/** 获取当前用户信息 **/
		User user = ThreadVariable.getUser();
		/** 获取当前用户网格类型  **/
		Long orgTypeDictDictId = 0L;
		if (user != null && user.getOrganization() != null
				&& user.getOrganization().getOrgType() != null) {
			orgTypeDictDictId = user.getOrganization().getOrgType().getId();
		}
		/** 如果是职能部门获取父网格  **/
		if (orgTypeDict != null && orgTypeDict.getId() != null
				&& orgTypeDict.getId().equals(orgTypeDictDictId)) {
			if (positiveInfoRecordVo != null && positiveInfoRecordVo.getOrganization() != null) {
				Organization organization = organizationDubboService
						.getParentOrgByOrgTypeAndChildOrgId(positiveInfoRecordVo.getOrganization()
								.getId(), OrganizationLevel.TOWN);
				positiveInfoRecordVo.setOrganization(organization);
			}
		}
	}

	private void fillAttachFileNames(PositiveInfoRecord positiveInfoRecord) {
		String[] attachFileNames = new String[] {};
		if (attachFiles != null && attachFiles.length != 0) {
			attachFiles[0] = "," + attachFiles[0];
			attachFileNames = attachFiles;
		}
		// 多个参数
		if (attachFile != null && attachFile.length != 0) {
			String[] strTmp = attachFile[0].split(",");
			for (int i = 0; i < strTmp.length; i++) {
				strTmp[i] = "," + strTmp[i];
			}
			attachFileNames = strTmp;
		}
		positiveInfoRecord.setAttachFileNames(attachFileNames);
	}

	public PositiveInfoRecord getPositiveInfoRecord() {
		return positiveInfoRecord;
	}

	public void setPositiveInfoRecord(PositiveInfoRecord positiveInfoRecord) {
		this.positiveInfoRecord = positiveInfoRecord;
	}

	public PositiveInfoRecordVo getPositiveInfoRecordVo() {
		return positiveInfoRecordVo;
	}

	public void setPositiveInfoRecordVo(PositiveInfoRecordVo positiveInfoRecordVo) {
		this.positiveInfoRecordVo = positiveInfoRecordVo;
	}

	public String getIds() {
		return ids;
	}

	public void setIds(String ids) {
		this.ids = ids;
	}

	public Long getOrgId() {
		return orgId;
	}

	public void setOrgId(Long orgId) {
		this.orgId = orgId;
	}

	public List<PositiveInfoRecord> getPositiveInfoRecords() {
		return positiveInfoRecords;
	}

	public void setPositiveInfoRecords(List<PositiveInfoRecord> positiveInfoRecords) {
		this.positiveInfoRecords = positiveInfoRecords;
	}

	public String[] getAttachFiles() {
		return attachFiles;
	}

	public void setAttachFiles(String[] attachFiles) {
		this.attachFiles = attachFiles;
	}

	public String[] getAttachFile() {
		return attachFile;
	}

	public void setAttachFile(String[] attachFile) {
		this.attachFile = attachFile;
	}

	public Long getId() {
		return id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	
}
