package com.tianque.datatransfer.dataconvert;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.tianque.core.systemLog.service.SystemLogService;
import com.tianque.core.systemLog.util.ModelType;
import com.tianque.core.systemLog.util.OperatorType;
import com.tianque.core.util.ObjectToJSON;
import com.tianque.core.util.ThreadVariable;
import com.tianque.core.validate.ValidateResult;
import com.tianque.domain.Organization;
import com.tianque.domain.property.OrganizationLevel;
import com.tianque.domain.property.OrganizationType;
import com.tianque.domain.property.PropertyTypes;
import com.tianque.service.impl.OrganizationServiceHelper;
import com.tianque.sysadmin.service.OrganizationDubboService;
import com.tianque.sysadmin.service.PropertyDictService;
import com.vladium.logging.Logger;

@Component("organizationDataConverter")
public class OrganizationDataConverter extends
		AbstractDataConverter<Organization> {

	@Autowired
	private OrganizationDubboService organizationDubboService;
	@Autowired
	private PropertyDictService propertyDictService;
	@Autowired
	private SystemLogService systemLogService;

	@Override
	public Organization convertToDomain(String[] cellValues, ValidateResult vr) {

		Organization result = new Organization();

		result.setOrgType(propertyDictService
				.findPropertyDictByDomainNameAndDictDisplayName(
						OrganizationType.ORG_TYPE_KEY, cellValues[0]));
		if (result.getOrgType().getInternalId() == OrganizationType.FUNCTIONAL_ORG) {
			result.setFunctionalOrgType(propertyDictService
					.findPropertyDictByDomainNameAndDictDisplayName(
							PropertyTypes.FUNCTIONAL_ORG_TYPE, cellValues[1]));
		}
		result.setOrgLevel(propertyDictService
				.findPropertyDictByDomainNameAndDictDisplayName(
						OrganizationLevel.ORG_LEVEL_KEY, cellValues[2]));
		int marginNum = getMarginNum(result);

		result.setDepartmentNo(cellValues[cellValues.length - marginNum]);
		result.setOrgName(cellValues[cellValues.length - marginNum - 1]);

		Organization parentOrg = new Organization();
		if (marginNum != 11) {
			parentOrg.setDepartmentNo(cellValues[cellValues.length - marginNum
					- 2]);
			result.setParentOrg(parentOrg);
		}
		return result;
	}

	private int getMarginNum(Organization result) {
		int internalId = result.getOrgLevel().getInternalId();
		switch (internalId) {
		case OrganizationLevel.PROVINCE:
			return 11;
		case OrganizationLevel.CITY:
			return 9;
		case OrganizationLevel.DISTRICT:
			return 7;
		case OrganizationLevel.TOWN:
			return 5;
		case OrganizationLevel.VILLAGE:
			return 3;
		case OrganizationLevel.GRID:
			return 1;
		}
		return 0;
	}

	@Override
	public boolean isRepeatData(Organization domain) {
		return organizationDubboService.isHasThisOrganization(domain.getId());
	}

	@Override
	public Organization persistenceDomain(Organization domain) {
		if (null != domain.getParentOrg()) {
			domain.setParentOrg(organizationDubboService.getOrgByDepartmentNo(domain
					.getParentOrg().getDepartmentNo()));
		} else {
			domain.setParentOrg(organizationDubboService
					.findOrganizationsByParentId(null).get(0));
		}
		Organization organization = organizationDubboService.addOrganization(domain);
		systemLogService
				.log(Logger.INFO,
						ModelType.DEPT,
						OperatorType.IPORT,
						ThreadVariable.getSession().getUserName()
								+ "在"
								+ organizationDubboService
										.getOrganizationRelativeNameByRootOrgIdAndOrgId(
												organization.getId(),
												OrganizationServiceHelper
														.getRootOrg(
																organizationDubboService)
														.getId()) + "导入组织机构"
								+ organization.getOrgName(), ObjectToJSON
								.convertJSON(domain));
		return domain;
	}

	@Override
	public Organization updateDomain(Organization domain) {
		if (null != domain.getParentOrg()) {
			domain.setParentOrg(organizationDubboService.getOrgByDepartmentNo(domain
					.getParentOrg().getDepartmentNo()));
		}
		organizationDubboService.updateOrganizationByName(domain.getOrgName(),
				domain.getId(), domain);
		return domain;
	}

	@Override
	public ValidateResult validate(Organization organization, int realRow) {

		return new ValidateResult();
	}

}