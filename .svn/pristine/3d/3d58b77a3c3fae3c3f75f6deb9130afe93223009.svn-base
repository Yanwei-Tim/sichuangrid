package com.tianque.baseInfo.mentalPatient.controller;

import java.util.ArrayList;
import java.util.List;

import org.apache.commons.lang.StringUtils;
import org.apache.struts2.convention.annotation.Action;
import org.apache.struts2.convention.annotation.Actions;
import org.apache.struts2.convention.annotation.Namespace;
import org.apache.struts2.convention.annotation.Result;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Controller;
import org.springframework.transaction.annotation.Transactional;

import com.tianque.baseInfo.base.controller.PopulationControllerAdapter;
import com.tianque.baseInfo.mentalPatient.domain.MentalPatient;
import com.tianque.baseInfo.mentalPatient.domain.ServiceSupervisionMeasures;
import com.tianque.baseInfo.mentalPatient.service.MentalPatientService;
import com.tianque.controller.ControllerHelper;
import com.tianque.controller.annotation.EncryptAnnotation;
import com.tianque.controller.annotation.PermissionFilter;
import com.tianque.core.util.BaseInfoTables;
import com.tianque.core.vo.GridPage;
import com.tianque.core.vo.PageInfo;
import com.tianque.domain.Organization;
import com.tianque.sysadmin.service.OrganizationDubboService;

@Transactional
@Scope("prototype")
@SuppressWarnings("serial")
@Controller("mentalPatientController")
@Namespace("/baseinfo/mentalPatientManage")
public class MentalPatientController extends
		PopulationControllerAdapter<MentalPatient> {
	private static Logger logger = LoggerFactory
			.getLogger(MentalPatientController.class);
	@Autowired
	private MentalPatientService mentalPatientService;
	@Autowired
	private OrganizationDubboService organizationDubboService;

	private MentalPatient population;
	private ServiceSupervisionMeasures serviceSupervisionMeasures;
	private String supervisorName;// 监管人员名称
	private String populationType;// 人员类型名称

	@Actions({
			@Action(value = "dispatchOperate", results = {
					@Result(name = "success", location = "/baseinfo/commonPopulation/commonPopulationDlg.jsp"),
					@Result(name = "search", location = "/baseinfo/mentalPatient/searchMentalPatientDlg.jsp"),
					// @Result(name = "print", location =
					// "/baseinfo/mentalPatient/maintainMentalPatientPrintDlg.jsp"),
					@Result(name = "print", location = "/baseinfo/commonPopulation/printTabPreviewDlg.jsp"),
					@Result(name = "view", location = "/baseinfo/mentalPatient/mentalPatientViewDlg.jsp"),
					@Result(name = "statistic", location = "/baseinfo/mentalPatient/mentalPatientlistForStatistics.jsp"),
					@Result(name = "error", type = "json", params = { "root",
							"errorMessage" }) }),
			@Action(value = "dispatchOperateForGis", results = {
					@Result(name = "view", location = "/baseinfo/mentalPatient/mentalPatientViewDlg_gis.jsp"),
					@Result(name = "error", type = "json", params = { "root",
							"errorMessage" }) }) })
	public String dispatchOperate() throws Exception {
		actionName = "maintainMentalPatientBaseInfo";
		ajaxUrl = "hasDuplicateMentalPatientPopulation";
		population = dispathBaseInfo(population);
		return getRetunString();
	}

	@Actions({ @Action(value = "dispatchOperateByEncrypt", results = {
			@Result(name = "success", location = "/baseinfo/commonPopulation/commonPopulationDlg.jsp"),
			@Result(name = "search", location = "/baseinfo/mentalPatient/searchMentalPatientDlg.jsp"),
			@Result(name = "print", location = "/baseinfo/commonPopulation/printTabPreviewDlg.jsp"),
			@Result(name = "view", location = "/baseinfo/mentalPatient/mentalPatientViewDlg.jsp"),
			@Result(name = "statistic", location = "/baseinfo/mentalPatient/mentalPatientlistForStatistics.jsp"),
			@Result(name = "error", type = "json", params = { "root",
					"errorMessage" }) }) })
	@EncryptAnnotation
	public String dispatchOperateByEncrypt() throws Exception {
		actionName = "maintainMentalPatientBaseInfo";
		ajaxUrl = "hasDuplicateMentalPatientPopulation";
		population = dispathBaseInfo(population);
		return getRetunString();
	}

	@Override
	protected MentalPatient getPopulationFetchOrgById(Long id) {
		MentalPatient population = mentalPatientService
				.getMentalPatientById(id);
		population.getOrganization().setOrgName(
				ControllerHelper.getOrganizationRelativeName(population
						.getOrganization().getId(), organizationDubboService));
		return population;
	}

	@Action(value = "maintainMentalPatientBaseInfo", results = {
			@Result(name = "success", type = "json", params = { "root",
					"population", "ignoreHierarchy", "false" }),
			@Result(name = "addcache", type = "json", params = { "root",
					"cacheId", "ignoreHierarchy", "false" }),
			@Result(name = "error", type = "json", params = { "root",
					"errorMessage" }) })
	public String maintainBaseInfo() throws Exception {
		if (null != population && null != population.getId()) {
			population = mentalPatientService
					.updateMentalPatientBaseInfo(population);
		} else {
			population = mentalPatientService
					.addMentalPatientBaseInfo(population);
		}
		return SUCCESS;
	}

	@Action(value = "dispatchMentalPatientBusiness", results = {
			@Result(name = "success", location = "/baseinfo/mentalPatient/mentalPatientBussiness.jsp"),
			@Result(name = "error", type = "json", params = { "root",
					"errorMessage" }) })
	public String dispatchBusiness() throws Exception {
		if (null != id) {
			population = getPopulationFetchOrgById(id);
		}
		return SUCCESS;
	}

	@Action(value = "hasDuplicateMentalPatientPopulation", results = {
			@Result(name = "success", type = "json", params = { "root",
					"hasDuplicatePopulation" }),
			@Result(name = "error", type = "json", params = { "root",
					"errorMessage" }) })
	public String hasDuplicatePopulation() throws Exception {
		if (organizationId == null) {
			errorMessage = "组织机构ID不能为空";
			return ERROR;
		}
		hasDuplicatePopulation = mentalPatientService
				.hasDuplicateMentalPatient(organizationId,
						population.getIdCardNo(), population.getId());
		return SUCCESS;
	}

	@Action(value = "hasDuplicateResultMentalPatientPopulation", results = {
			@Result(name = "success", type = "json", params = { "root",
					"hasDuplicatePopulation" }),
			@Result(name = "error", type = "json", params = { "root",
					"errorMessage" }) })
	public String hasDuplicateResultMentalPatientPopulation() throws Exception {
		if (organizationId == null) {
			errorMessage = "组织机构ID不能为空";
			return ERROR;
		}
		hasDuplicatePopulation = false;
		population = mentalPatientService.hasDuplicateMentalPatient(
				organizationId, population.getIdCardNo());
		if (population != null) {
			if (population.getSourcesState() != 1) {
				hasDuplicatePopulation = true;
			}
		}
		return SUCCESS;
	}

	@PermissionFilter(ename = "addMentalPatient")
	@Action(value = "addMentalPatient", results = {
			@Result(name = "success", type = "json", params = { "root",
					"population", "ignoreHierarchy", "false" }),
			@Result(name = "error", type = "json", params = { "root",
					"errorMessage" }) })
	public String maintainBusinessInfo() throws Exception {
		population = mentalPatientService
				.updateMentalPatientBusinessInfo(population);
		return SUCCESS;
	}

	@Action(value = "addMentalPatientForMobile", results = { @Result(name = "success", type = "json", params = {
			"root", "population", "ignoreHierarchy", "false",
			"excludeNullProperties", "true" }) })
	public String addMentalPatient() throws Exception {
		population = mentalPatientService.addMentalPatient(population);
		return SUCCESS;
	}

	@Action(value = "updateMentalPatient", results = { @Result(name = "success", type = "json", params = {
			"root", "population", "ignoreHierarchy", "false",
			"excludeNullProperties", "true" }) })
	public String updateMentalPatient() throws Exception {
		population = mentalPatientService.updateMentalPatient(population);
		return SUCCESS;
	}

	@PermissionFilter(ename = "mentalPatientManagement")
	@Action(value = "mentalPatientList", results = { @Result(type = "json", name = "success", params = {
			"root", "gridPage", "ignoreHierarchy", "false" }) })
	public String findGridPageByOrgIdAndIsEmphasis() throws Exception {
		if (organizationId == null) {
			gridPage = new GridPage(emptyPage(rows));
		} else {
			gridPage = new GridPage(ControllerHelper.processAllOrgRelativeName(
					mentalPatientService
							.findMentalPatientsForPageByOrgInternalCode(
									organizationId, page, rows, sidx, sord,
									population.getIsEmphasis()),
					organizationDubboService, new String[] { "organization" },
					organizationId));
		}
		return SUCCESS;
	}

	@Action(value = "serviceSupervisionMeasuresPatientList", results = { @Result(type = "json", name = "success", params = {
			"root", "gridPage", "ignoreHierarchy", "false" }) })
	public String serviceSupervisionMeasuresPatientList() throws Exception {
		if (population == null || population.getId() == null
				|| serviceSupervisionMeasures == null
				|| serviceSupervisionMeasures.getType() == null
				|| "".equals(serviceSupervisionMeasures.getType())) {
			gridPage = new GridPage(emptyPage(rows));
		} else {
			serviceSupervisionMeasures.setMentalPatient(population);
			gridPage = new GridPage(
					mentalPatientService
							.findServiceSupervisionMeasuresPatientForList(page,
									rows, sidx, sord,
									serviceSupervisionMeasures));
		}
		return SUCCESS;
	}

	@EncryptAnnotation
	@Actions({
			@Action(value = "viewCommonPopulation", results = { @Result(name = "success", location = "/baseinfo/commonPopulation/viewCommonPopulation.jsp") }),
			@Action(value = "viewMentalPatient", results = { @Result(name = "success", location = "/baseinfo/mentalPatient/mentalPatientView.jsp") }),
			@Action(value = "getCommonPopulationByIdForMobile", results = {
					@Result(name = "success", type = "json", params = { "root",
							"population", "ignoreHierarchy", "false",
							"excludeNullProperties", "true" }),
					@Result(name = "error", type = "json", params = { "root",
							"errorMessage" }) }) })
	public String viewInfo() throws Exception {
		if (population == null || population.getId() == null) {
			this.errorMessage = "严重精神障碍患者id不能为空";
			return ERROR;
		} else {
			population = mentalPatientService.getMentalPatientById(population
					.getId());
			population.getOrganization().setOrgName(
					ControllerHelper.getOrganizationRelativeName(population
							.getOrganization().getId(), organizationDubboService));
		}
		// 拆分图片路径字符串
		if (null != population.getImgUrl()) {
			String[] value = population.getImgUrl().split(",");
			population.setImgUrl(value[0]);
		}
		return SUCCESS;
	}

	@EncryptAnnotation
	@PermissionFilter(ename = "deleteMentalPatient")
	@Action(value = "deleteMentalPatientByIds", results = {
			@Result(name = "success", type = "json", params = { "root", "true",
					"excludeNullProperties", "true" }),
			@Result(name = "error", type = "json", params = { "root",
					"errorMessage" }) })
	public String deleteByIds() throws Exception {
		mentalPatientService.deleteMentalPatientByIds(analyzePopulationIds());
		return SUCCESS;
	}

	private PageInfo<MentalPatient> emptyPage(int pageSize) {
		PageInfo<MentalPatient> pageInfo = new PageInfo<MentalPatient>();
		pageInfo.setTotalRowSize(0);
		pageInfo.setCurrentPage(0);
		pageInfo.setPerPageSize(pageSize);
		pageInfo.setResult(new ArrayList<MentalPatient>());
		return pageInfo;
	}

	private List<Long> initTargetId(String[] targetIds, int size) {
		List<Long> idLongs = new ArrayList<Long>();
		for (int i = size; i < targetIds.length; i++) {
			String tempId = targetIds[i];
			if (size == 0) {
				idLongs.add(Long.parseLong(targetIds[i]));
			} else {
				idLongs.add(Long.parseLong(tempId));
			}
		}
		return idLongs;
	}

	@Action(value = "updateEmphasiseById", results = {
			@Result(name = "success", type = "json", params = { "root",
					"populationIdList", "ignoreHierarchy", "false" }),
			@Result(name = "error", type = "json", params = { "root",
					"errorMessage" }) })
	public String updateEmphasiseById() throws Exception {
		populationIdList = mentalPatientService
				.updateLogOutDetailAndCountByPopulationTypeAndIds(orgId,
						population.getLogoutDetail(),
						BaseInfoTables.MENTALPATIENT_KEY,
						analyzePopulationIds());
		return SUCCESS;
	}

	/**
	 * ID加密 关注
	 * 
	 * @return
	 */
	@EncryptAnnotation
	@Action(value = "updateEmphasiseByEncryptId", results = {
			@Result(name = "success", type = "json", params = { "root",
					"populationIdList", "ignoreHierarchy", "false" }),
			@Result(name = "error", type = "json", params = { "root",
					"errorMessage" }) })
	public String updateEmphasiseByEncryptId() throws Exception {
		populationIdList = mentalPatientService
				.updateLogOutDetailAndCountByPopulationTypeAndIds(orgId,
						population.getLogoutDetail(),
						BaseInfoTables.MENTALPATIENT_KEY,
						analyzePopulationIds());
		return SUCCESS;
	}

	@Action(value = "editServiceSupervisionMeasures", results = {
			@Result(name = "success", location = "/baseinfo/mentalPatient/editServiceSupervisionMeasures.jsp"),
			@Result(name = "error", type = "json", params = { "root",
					"errorMessage" }) })
	public String editServiceSupervisionMeasures() throws Exception {
		if (serviceSupervisionMeasures == null
				|| serviceSupervisionMeasures.getId() == null) {
			return SUCCESS;
		}
		serviceSupervisionMeasures = mentalPatientService
				.getServiceSupervisionMeasuresById(serviceSupervisionMeasures
						.getId());
		return SUCCESS;
	}

	@Action(value = "saveServiceSupervisionMeasures", results = {
			@Result(name = "success", type = "json", params = { "root",
					"serviceSupervisionMeasures", "ignoreHierarchy", "false" }),
			@Result(name = "error", type = "json", params = { "root",
					"errorMessage" }) })
	public String saveServiceSupervisionMeasures() throws Exception {
		if (null != serviceSupervisionMeasures
				&& null != serviceSupervisionMeasures.getId()) {
			serviceSupervisionMeasures = mentalPatientService
					.updateServiceSupervisionMeasures(serviceSupervisionMeasures);
		} else {
			if (serviceSupervisionMeasures == null
					|| serviceSupervisionMeasures.getMentalPatient() == null
					|| serviceSupervisionMeasures.getMentalPatient().getId() == null
					|| serviceSupervisionMeasures.getType() == null) {
				errorMessage = "缺少参数";
				return ERROR;
			}
			serviceSupervisionMeasures = mentalPatientService
					.addServiceSupervisionMeasures(serviceSupervisionMeasures);
		}
		return SUCCESS;
	}

	@Action(value = "deleteServiceSupervisionMeasuresById", results = {
			@Result(name = "success", type = "json", params = { "root", "true",
					"excludeNullProperties", "true" }),
			@Result(name = "error", type = "json", params = { "root",
					"errorMessage" }) })
	public String deleteServiceSupervisionMeasuresById() throws Exception {
		if (serviceSupervisionMeasures == null
				|| serviceSupervisionMeasures.getId() == null) {
			errorMessage = "缺少严重精神障碍患者ID";
			return ERROR;
		}
		mentalPatientService
				.deleteServiceSupervisionMeasuresById(serviceSupervisionMeasures
						.getId());
		return SUCCESS;
	}

	@Action(value = "updateDeathByIds", results = {
			@Result(name = "success", type = "json", params = { "root",
					"populations", "ignoreHierarchy", "false" }),
			@Result(name = "error", type = "json", params = { "root",
					"errorMessage" }) })
	public String updateDeathByIds() throws Exception {
		populations = mentalPatientService.updateDeathByIds(
				analyzePopulationIds(), population.isDeath());
		return SUCCESS;
	}

	/**
	 * ID加密 取消死亡
	 * 
	 * @return
	 */
	@EncryptAnnotation
	@Action(value = "updateDeathByEncryptIds", results = {
			@Result(name = "success", type = "json", params = { "root",
					"populations", "ignoreHierarchy", "false" }),
			@Result(name = "error", type = "json", params = { "root",
					"errorMessage" }) })
	public String updateDeathByEncryptIds() throws Exception {
		populations = mentalPatientService.updateDeathByIds(
				analyzePopulationIds(), population.isDeath());
		return SUCCESS;
	}

	@Action(value = "findMentalPatientByIdCardNoAndOrgId", results = {
			@Result(name = "success", type = "json", params = { "root",
					"population", "ignoreHierarchy", "false" }),
			@Result(name = "error", type = "json", params = { "root",
					"errorMessage" }) })
	public String findMentalPatientByIdCardNoAndOrgId() throws Exception {
		population = mentalPatientService.findMentalPatientByIdCardNoAndOrgId(
				population.getIdCardNo(), population.getOrganization().getId());
		return SUCCESS;

	}

	private Long[] analyzePopulationIds() {
		String[] deleteId = populationIds.split(",");
		List<Long> idList;
		if (deleteId[0].equals("")) {
			idList = initTargetId(deleteId, 1);
		} else {
			idList = initTargetId(deleteId, 0);
		}
		Long[] ids = new Long[idList.size()];
		for (int i = 0; i < ids.length; i++) {
			ids[i] = idList.get(i);
		}
		return ids;
	}

	public MentalPatient getPopulation() {
		return population;
	}

	public void setPopulation(MentalPatient population) {
		this.population = population;
	}

	public String getSupervisorName() {
		return supervisorName;
	}

	public void setSupervisorName(String supervisorName) {
		this.supervisorName = supervisorName;
	}

	public String getPopulationType() {
		return populationType;
	}

	public void setPopulationType(String populationType) {
		this.populationType = populationType;
	}

	// fateson add 数据转移操作
	// current org id
	private Long orgId;
	Long targetOrgId;
	private String currentClassName = "";
	private Organization organization = null;
	// need move peoples id
	String ids = "";

	public String getIds() {
		return ids;
	}

	public void setIds(String ids) {
		this.ids = ids;
	}

	public Organization getOrganization() {
		return organization;
	}

	public void setOrganization(Organization organization) {
		this.organization = organization;
	}

	public Long getOrgId() {
		return orgId;
	}

	public void setOrgId(Long orgId) {
		this.orgId = orgId;
	}

	public String getCurrentClassName() {
		return currentClassName;
	}

	public void setCurrentClassName(String currentClassName) {
		this.currentClassName = currentClassName;
	}

	public Long getTargetOrgId() {
		return targetOrgId;
	}

	public void setTargetOrgId(Long targetOrgId) {
		this.targetOrgId = targetOrgId;
	}

	@Action(value = "shiftDispatch", results = {
			@Result(name = "success", location = "/common/shiftTree.jsp"),
			@Result(name = "error", type = "json", params = { "root",
					"errorMessage" }) })
	public String shiftDispatch() throws Exception {

		if (orgId == null) {
			errorMessage = "组织机构不能为空";
			return ERROR;
		}
		organization = organizationDubboService.getSimpleOrgById(orgId);
		if (StringUtils.isBlank(currentClassName)) {
			errorMessage = "系统忙";
			logger.error("deal shiftDispatch occur Error，currentClassName is empty");
			return ERROR;
		}

		return SUCCESS;
	}

	String SEPARATOR = ".";

	/**
	 * 数据转移操作
	 * 
	 * @return
	 */

	@Action(value = "shiftPerson", results = {
			@Result(name = "success", type = "json", params = {}),
			@Result(name = "error", type = "json", params = { "root",
					"errorMessage" }) })
	public String shiftPerson() throws Exception {
		if (ids.equals("")) {
			errorMessage = "请选择要转移的数据";
			return ERROR;
		}

		if (orgId == 0 || targetOrgId == 0) {
			errorMessage = "请选择组织机构";
			return ERROR;
		}

		if (targetOrgId.equals(orgId)) {
			errorMessage = "请选择其他组织机构";
			return ERROR;
		}

		String[] moveids = ids.split(",");
		mentalPatientService.moveTempByIds(moveids, targetOrgId);
		return SUCCESS;
	}

	public ServiceSupervisionMeasures getServiceSupervisionMeasures() {
		return serviceSupervisionMeasures;
	}

	public void setServiceSupervisionMeasures(
			ServiceSupervisionMeasures serviceSupervisionMeasures) {
		this.serviceSupervisionMeasures = serviceSupervisionMeasures;
	}

}
