<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-2.5.xsd 
	http://www.springframework.org/schema/tx 
	http://www.springframework.org/schema/tx/spring-tx-2.5.xsd 
	http://www.springframework.org/schema/jee 
	http://www.springframework.org/schema/jee/spring-jee-2.5.xsd 
	http://www.springframework.org/schema/aop 
	http://www.springframework.org/schema/aop/spring-aop-2.5.xsd
	http://www.springframework.org/schema/context 
	http://www.springframework.org/schema/context/spring-context-2.5.xsd
	http://code.alibabatech.com/schema/dubbo
    http://code.alibabatech.com/schema/dubbo/dubbo.xsd">

	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath*:jdbc.properties</value>
				<value>classpath*:jdbc-mongo.properties</value>
				<value>classpath*:grid.properties</value>
				<value>classpath*:redis.properties</value>
				<value>classpath*:hbaseJdbc.properties</value>
			</list>
		</property>
	</bean>
    <context:annotation-config />
	<tx:annotation-driven transaction-manager="txManager" />
	<context:component-scan base-package="com.tianque" />
	<aop:aspectj-autoproxy proxy-target-class="true" />
	

	<!-- Spring提供的iBatis的SqlMap配置-->
	<bean id="sqlMapClient" class="org.springframework.orm.ibatis.SqlMapClientFactoryBean">
		 <property name="configLocations">   
                <list>   
                        <value>classpath:/SqlMapConfig.xml</value>
                        <value>classpath:/config/plugin/*_SqlMapConfig.xml</value>
                        
                </list>    
        </property>
		<property name="mappingLocations">
			<list>
				<value>classpath*:/sqlmaps/*.xml</value>
				<value>classpath*:/sqlmaps/searchs/*.xml</value>
				<value>classpath*:/sqlmaps/issue/*.xml</value>
				<value>classpath*:/sqlmaps/temps/*.xml</value>
				<value>classpath*:/sqlmaps/after/*.xml</value>
				<value>classpath*:/config/sqlmaps/*.xml</value>
				<value>classpath*:/sqlmaps/openLayersMap/*.xml</value>
				<value>classpath*:/sqlmaps/sms/*.xml</value>
				<value>classpath*:/sqlmaps/serviceList/*.xml</value>
			</list>
		</property>
		<property name="dataSource" ref="zzGrid_main_ds" />
		<property name="lobHandler" ref="lobHandler" />
	</bean>
  
	<!-- Spring提供的iBatis的大字段处理-->
	<bean id="lobHandler" class="org.springframework.jdbc.support.lob.DefaultLobHandler" />
	
	<!-- 定义事务管理器（声明式的事务） -->
    <bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="zzGrid_main_ds" />
    </bean>

<!-- 
	<bean id="atomikosUserTransaction"
        class="com.atomikos.icatch.jta.UserTransactionImp">
        <property name="transactionTimeout" value="60000"/>
    </bean>

    <bean id="atomikosTransactionManager"
        class="com.atomikos.icatch.jta.UserTransactionManager"
        init-method="init" destroy-method="close">
        <property name="forceShutdown">
            <value>true</value>
        </property>
    </bean>
    
    
	<bean id="txManager" class="org.springframework.transaction.jta.JtaTransactionManager" >
        <property name="transactionManager">
            <ref bean="atomikosTransactionManager" />
        </property>
		<property name="userTransaction" ref="atomikosUserTransaction" /> 
	</bean>
 -->
	<bean id="defaultIssueListeners" class="java.util.ArrayList">
   		<constructor-arg>
   			<list>
   				<ref bean="adjustCurrentStepAndOrg"/>
   				<ref bean="savingOperationLog"/>
   				<ref bean="appendToWorkDaily"/>
   				<ref bean="sendPlatformMessage"/>
   				<ref bean="sendSmsMessage"/>
   				<ref bean="scoreForOrganization"/>
   				<ref bean="deleteTopIssue"/>
   				<ref bean="eventSourceStatChange"/>
   			</list>
   		</constructor-arg>
   </bean>
   <bean id="defaultFourTeamsIssueListeners" class="java.util.ArrayList">
   		<constructor-arg>
   			<list>
   				<ref bean="fourTeamsAdjustCurrentStepAndOrg"/>
   				<ref bean="fourTeamsSavingOperationLog"/>
   				<ref bean="fourTeamsAppendToWorkDaily"/>
   				<ref bean="fourTeamsSendPlatformMessage"/>
   				<ref bean="fourTeamsSendSmsMessage"/>
   				<ref bean="fourTeamsScoreForOrganization"/>
   				<ref bean="fourTeamsDeleteTopIssue"/>
   				<ref bean="fourTeamsEventSourceStatChange"/>
   			</list>
   		</constructor-arg>
   </bean>
   
   <bean id="SpringBeanUtil " class="com.tianque.core.util.SpringBeanUtil " scope="singleton" lazy-init="false"/>
   <bean id ="excelExportHelper" class = "com.tianque.datatransfer.ExcelExportHelper" lazy-init="false" />
   
   <!-- 连接短信发送平台数据库 -->
   <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource"><ref bean="zzGrid_main_ds"/></property>
    </bean>
    
    <!--ibatis 字节码编程-->
    <bean id="nativeQueryForOracle" class="org.oproject.framework.orm.ibatis.query.OracleNativeQuery"/>
	<!-- 自定义SQL执行器-->
	<bean id="customizedSQLExecutor" class="org.oproject.framework.orm.ibatis.CustomizedSQLExecutor" init-method="init" lazy-init="false">
	   <property name="nativeQuery" ref="nativeQueryForOracle" />
	   <property name="sqlMapClient" ref="sqlMapClient"/>
	</bean>  
    
    <bean id="sqlMapClientTemplate" class="org.springframework.orm.ibatis.SqlMapClientTemplate">
    	<property name="sqlMapClient" ref="sqlMapClient"></property>
    </bean>
    
    <bean class="org.oproject.framework.orm.ibatis.bytecode.codegenerator.method.impl.InsertHandler"/>
    <bean class="org.oproject.framework.orm.ibatis.bytecode.codegenerator.method.impl.UpdateHandler"/>
    <bean class="org.oproject.framework.orm.ibatis.bytecode.codegenerator.method.impl.DeleteHandle"/>
    <bean class="org.oproject.framework.orm.ibatis.bytecode.codegenerator.method.impl.BatchInsertHandle"/>
    <bean class="org.oproject.framework.orm.ibatis.bytecode.codegenerator.method.impl.BatchUpdateHandle"/>
    <bean class="org.oproject.framework.orm.ibatis.bytecode.codegenerator.method.impl.BatchDeleteHandle"/>
    <bean class="org.oproject.framework.orm.ibatis.bytecode.codegenerator.method.impl.QueryForObjectHandle"/>
    <bean class="org.oproject.framework.orm.ibatis.bytecode.codegenerator.method.impl.QueryForListHandle"/>
    <bean class="org.oproject.framework.orm.ibatis.bytecode.codegenerator.method.impl.QueryForPageResultHandle"/>
    
    <!--配置启动后，扫描@DynamicIbatisDAO原注解-->
    <bean class="org.oproject.framework.orm.ibatis.config.DynamicIbatisBeanFactoryPostProcessor">
    	<property name="scanPath">
    		<list>
    			<value>com.tianque.**.dao</value>
    		</list>
    	</property>
    </bean>
    
    <!-- 基于注解方式使用异常处理框架 -->
	<bean class="com.tianque.exception.processor.ExceptionalAnnotationBeanPostProcessor" lazy-init="true"/>
	
		
	<bean id="scheduleManagerFactory" class="com.tianque.plugin.tbSchedule.TQScheduleManagerFactory"
		init-method="init" autowire="byName">
		<property name="zkConfig">
           <map>
              <entry key="zkConnectString" value="${TBSchedule.zkConnectString}" />
              <entry key="rootPath" value="${TBSchedule.rootPath}" />
              <entry key="zkSessionTimeout" value="${TBSchedule.zkSessionTimeout}" />
              <entry key="userName" value="${TBSchedule.userName}" />
              <entry key="password" value="${TBSchedule.password}" />
              <entry key="isCheckParentPath" value="${TBSchedule.isCheckParentPath}" />
           </map>
       </property>	
	</bean>
	<!--
    <bean  class="com.tianque.DataSourceHeartbeatMonitor">
	</bean>-->
</beans>